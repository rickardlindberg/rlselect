{
    "links": {
        "0b8165dea76a41138157eaa6c1652ab4": {
            "from": "243699f5ca5f4e60862da6fac02f4c5e",
            "timestamp_created": "2021-06-19T12:01:19.165311",
            "to": "60a53ecd900547f1b12465ccbe961b1b"
        },
        "207e33bf76414c4d84be013a4ed081e5": {
            "from": "243699f5ca5f4e60862da6fac02f4c5e",
            "timestamp_created": "2021-07-09T10:04:48.871682",
            "to": "442bbab5f6e74d77b7f52e762d0b8176"
        },
        "3d7a8e4189b34a1d8287040b7f8a8765": {
            "from": "243699f5ca5f4e60862da6fac02f4c5e",
            "timestamp_created": "2021-07-09T10:24:25.304718",
            "to": "1eab3cb2bcc94242884b5872b669f13b"
        },
        "5ae9c96d9ba4404e8df4ed93c23a311a": {
            "from": "243699f5ca5f4e60862da6fac02f4c5e",
            "timestamp_created": "2021-06-19T12:13:14.932160",
            "to": "64add2c2c062467fbe51fbf81b468ab9"
        },
        "6038a080bc404623b35d6c148d7ca3b5": {
            "from": "243699f5ca5f4e60862da6fac02f4c5e",
            "timestamp_created": "2021-06-19T11:52:08.954586",
            "to": "f83312733dd34f21be7a8a615a0acaaa"
        },
        "60af95bc62c94f5d95355bdf85f123b6": {
            "from": "243699f5ca5f4e60862da6fac02f4c5e",
            "timestamp_created": "2021-06-19T11:52:38.879777",
            "to": "6f7ec20770ba4748a2726f9813be3535"
        },
        "8205cbfdc870418087646261e15318c9": {
            "from": "243699f5ca5f4e60862da6fac02f4c5e",
            "timestamp_created": "2021-06-19T12:02:59.056426",
            "to": "42dfdb0812dc4fe09d1fe32f8ccdc22c"
        },
        "efd24c7fd84a4072870a192d8df81e27": {
            "from": "243699f5ca5f4e60862da6fac02f4c5e",
            "timestamp_created": "2021-07-09T10:07:08.712795",
            "to": "7ec8a0eba8324bc0863e5b146c8ad60c"
        }
    },
    "notes": {
        "1eab3cb2bcc94242884b5872b669f13b": {
            "chunkpath": [],
            "filepath": [
                "rlselect_history.sh"
            ],
            "fragments": [
                {
                    "text": "#!/usr/bin/env bash",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "set -e",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "result=$(tac ~/.bash_history | rlselect --tab --action -- \"$@\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "python - \"$result\" << EOF",
                    "type": "line"
                },
                {
                    "text": "import fcntl",
                    "type": "line"
                },
                {
                    "text": "import sys",
                    "type": "line"
                },
                {
                    "text": "import termios",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "action, selection = sys.argv[1].split(\"\\n\", 1)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "if action != \"tab\":",
                    "type": "line"
                },
                {
                    "text": "    selection += \"\\n\"",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "for ch in selection:",
                    "type": "line"
                },
                {
                    "text": "    fcntl.ioctl(sys.stdout.fileno(), termios.TIOCSTI, ch)",
                    "type": "line"
                },
                {
                    "text": "EOF",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "Enter note text...\n",
            "timestamp_created": "2021-07-09T10:24:25.304677",
            "type": "code"
        },
        "243699f5ca5f4e60862da6fac02f4c5e": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "rlselect2\n",
            "timestamp_created": "2021-06-19T11:51:56.011783",
            "type": "text"
        },
        "42dfdb0812dc4fe09d1fe32f8ccdc22c": {
            "chunkpath": [
                "curses_ui"
            ],
            "filepath": [
                "rlselect2.py"
            ],
            "fragments": [
                {
                    "text": "import contextlib",
                    "type": "line"
                },
                {
                    "text": "import curses",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "COLOR_MAP = {",
                    "type": "line"
                },
                {
                    "text": "    \"BACKGROUND\": -1,",
                    "type": "line"
                },
                {
                    "text": "    \"FOREGROUND\": -1,",
                    "type": "line"
                },
                {
                    "text": "    \"BLACK\": curses.COLOR_BLACK,",
                    "type": "line"
                },
                {
                    "text": "    \"BLUE\": curses.COLOR_BLUE,",
                    "type": "line"
                },
                {
                    "text": "    \"CYAN\": curses.COLOR_CYAN,",
                    "type": "line"
                },
                {
                    "text": "    \"GREEN\": curses.COLOR_GREEN,",
                    "type": "line"
                },
                {
                    "text": "    \"MAGENTA\": curses.COLOR_MAGENTA,",
                    "type": "line"
                },
                {
                    "text": "    \"RED\": curses.COLOR_RED,",
                    "type": "line"
                },
                {
                    "text": "    \"WHITE\": curses.COLOR_WHITE,",
                    "type": "line"
                },
                {
                    "text": "    \"YELLOW\": curses.COLOR_YELLOW,",
                    "type": "line"
                },
                {
                    "text": "}",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def curses_ui_run(config, controller):",
                    "type": "line"
                },
                {
                    "text": "    with _redirect_terminal():",
                    "type": "line"
                },
                {
                    "text": "        return curses.wrapper(_run, config, controller)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "@contextlib.contextmanager",
                    "type": "line"
                },
                {
                    "text": "def _redirect_terminal():",
                    "type": "line"
                },
                {
                    "text": "    stdin_fileno = sys.stdin.fileno()",
                    "type": "line"
                },
                {
                    "text": "    stdout_fileno = sys.stdout.fileno()",
                    "type": "line"
                },
                {
                    "text": "    process_stdin = os.dup(sys.stdin.fileno())",
                    "type": "line"
                },
                {
                    "text": "    process_stdout = os.dup(sys.stdout.fileno())",
                    "type": "line"
                },
                {
                    "text": "    try:",
                    "type": "line"
                },
                {
                    "text": "        terminal_stdin = open(\"/dev/tty\", \"rb\")",
                    "type": "line"
                },
                {
                    "text": "        terminal_stdout = open(\"/dev/tty\", \"wb\")",
                    "type": "line"
                },
                {
                    "text": "        os.dup2(terminal_stdin.fileno(), stdin_fileno)",
                    "type": "line"
                },
                {
                    "text": "        os.dup2(terminal_stdout.fileno(), stdout_fileno)",
                    "type": "line"
                },
                {
                    "text": "        yield",
                    "type": "line"
                },
                {
                    "text": "    finally:",
                    "type": "line"
                },
                {
                    "text": "        os.dup2(process_stdin, stdin_fileno)",
                    "type": "line"
                },
                {
                    "text": "        os.dup2(process_stdout, stdout_fileno)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def _run(screen, config, controller):",
                    "type": "line"
                },
                {
                    "text": "    curses.raw()",
                    "type": "line"
                },
                {
                    "text": "    if curses.has_colors():",
                    "type": "line"
                },
                {
                    "text": "        curses.use_default_colors()",
                    "type": "line"
                },
                {
                    "text": "        curses.init_pair(",
                    "type": "line"
                },
                {
                    "text": "            1,",
                    "type": "line"
                },
                {
                    "text": "            COLOR_MAP[config.get_highlight_fg()],",
                    "type": "line"
                },
                {
                    "text": "            COLOR_MAP[config.get_highlight_bg()],",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        curses.init_pair(",
                    "type": "line"
                },
                {
                    "text": "            2,",
                    "type": "line"
                },
                {
                    "text": "            COLOR_MAP[config.get_selection_fg()],",
                    "type": "line"
                },
                {
                    "text": "            COLOR_MAP[config.get_selection_bg()]",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "    controller.setup(screen)",
                    "type": "line"
                },
                {
                    "text": "    return _loop(controller, screen)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def _loop(controller, screen):",
                    "type": "line"
                },
                {
                    "text": "    patched_screen = _Screen(screen)",
                    "type": "line"
                },
                {
                    "text": "    buf = b\"\"",
                    "type": "line"
                },
                {
                    "text": "    while True:",
                    "type": "line"
                },
                {
                    "text": "        controller.render(patched_screen)",
                    "type": "line"
                },
                {
                    "text": "        ch = screen.getch()",
                    "type": "line"
                },
                {
                    "text": "        if ch > 255:",
                    "type": "line"
                },
                {
                    "text": "            if ch == curses.KEY_BACKSPACE:",
                    "type": "line"
                },
                {
                    "text": "                buf = BS.encode(locale.getpreferredencoding())",
                    "type": "line"
                },
                {
                    "text": "            elif ch == curses.KEY_ENTER:",
                    "type": "line"
                },
                {
                    "text": "                buf = CR.encode(locale.getpreferredencoding())",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                buf = b\"\"",
                    "type": "line"
                },
                {
                    "text": "                continue",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            buf += bytes([ch])",
                    "type": "line"
                },
                {
                    "text": "        try:",
                    "type": "line"
                },
                {
                    "text": "            unicode_character = buf.decode(locale.getpreferredencoding())",
                    "type": "line"
                },
                {
                    "text": "        except UnicodeDecodeError:",
                    "type": "line"
                },
                {
                    "text": "            # We are dealing with an incomplete multi-byte character.",
                    "type": "line"
                },
                {
                    "text": "            pass",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            buf = b\"\"",
                    "type": "line"
                },
                {
                    "text": "            result = controller.process_input(unicode_character)",
                    "type": "line"
                },
                {
                    "text": "            if result:",
                    "type": "line"
                },
                {
                    "text": "                return result",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class _Screen(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, curses_screen):",
                    "type": "line"
                },
                {
                    "text": "        self._curses_screen = curses_screen",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def getmaxyx(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._curses_screen.getmaxyx()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def erase(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._curses_screen.erase()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def addstr(self, y, x, text, style):",
                    "type": "line"
                },
                {
                    "text": "        if style == \"highlight\":",
                    "type": "line"
                },
                {
                    "text": "            attrs = curses.A_BOLD",
                    "type": "line"
                },
                {
                    "text": "            if curses.has_colors():",
                    "type": "line"
                },
                {
                    "text": "                attrs |= curses.color_pair(1)",
                    "type": "line"
                },
                {
                    "text": "        elif style == \"select\":",
                    "type": "line"
                },
                {
                    "text": "            attrs = curses.A_BOLD",
                    "type": "line"
                },
                {
                    "text": "            if curses.has_colors():",
                    "type": "line"
                },
                {
                    "text": "                attrs |= curses.color_pair(2)",
                    "type": "line"
                },
                {
                    "text": "        elif style == \"status\":",
                    "type": "line"
                },
                {
                    "text": "            attrs = curses.A_REVERSE | curses.A_BOLD",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            attrs = 0",
                    "type": "line"
                },
                {
                    "text": "        try:",
                    "type": "line"
                },
                {
                    "text": "            self._curses_screen.addstr(y, x, self._encode(text), attrs)",
                    "type": "line"
                },
                {
                    "text": "        except curses.error:",
                    "type": "line"
                },
                {
                    "text": "            # Writing last position (max_y, max_x) fails, but we can ignore it.",
                    "type": "line"
                },
                {
                    "text": "            pass",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def refresh(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._curses_screen.refresh()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _encode(self, text):",
                    "type": "line"
                },
                {
                    "text": "        return text.encode(locale.getpreferredencoding())",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "import contextlib\nimport curses\n\nfrom rlselectlib.unicode import BS, CR\n\n\nCOLOR_MAP = {\n    \"BACKGROUND\": -1,\n    \"FOREGROUND\": -1,\n    \"BLACK\": curses.COLOR_BLACK,\n    \"BLUE\": curses.COLOR_BLUE,\n    \"CYAN\": curses.COLOR_CYAN,\n    \"GREEN\": curses.COLOR_GREEN,\n    \"MAGENTA\": curses.COLOR_MAGENTA,\n    \"RED\": curses.COLOR_RED,\n    \"WHITE\": curses.COLOR_WHITE,\n    \"YELLOW\": curses.COLOR_YELLOW,\n}\n\n\ndef curses_ui_run(config, controller):\n    with _redirect_terminal():\n        return curses.wrapper(_run, config, controller)\n\n\n@contextlib.contextmanager\ndef _redirect_terminal():\n    stdin_fileno = sys.stdin.fileno()\n    stdout_fileno = sys.stdout.fileno()\n    process_stdin = os.dup(sys.stdin.fileno())\n    process_stdout = os.dup(sys.stdout.fileno())\n    try:\n        terminal_stdin = open(\"/dev/tty\", \"rb\")\n        terminal_stdout = open(\"/dev/tty\", \"wb\")\n        os.dup2(terminal_stdin.fileno(), stdin_fileno)\n        os.dup2(terminal_stdout.fileno(), stdout_fileno)\n        yield\n    finally:\n        os.dup2(process_stdin, stdin_fileno)\n        os.dup2(process_stdout, stdout_fileno)\n\n\ndef _run(screen, config, controller):\n    curses.raw()\n    if curses.has_colors():\n        curses.use_default_colors()\n        curses.init_pair(\n            1,\n            COLOR_MAP[config.get_highlight_fg()],\n            COLOR_MAP[config.get_highlight_bg()],\n        )\n        curses.init_pair(\n            2,\n            COLOR_MAP[config.get_selection_fg()],\n            COLOR_MAP[config.get_selection_bg()]\n        )\n    controller.setup(screen)\n    return _loop(controller, screen)\n\n\ndef _loop(controller, screen):\n    patched_screen = _Screen(screen)\n    buf = \"\"\n    while True:\n        controller.render(patched_screen)\n        ch = screen.getch()\n        if ch > 255:\n            if ch == curses.KEY_BACKSPACE:\n                buf = BS.encode(locale.getpreferredencoding())\n            elif ch == curses.KEY_ENTER:\n                buf = CR.encode(locale.getpreferredencoding())\n            else:\n                buf = \"\"\n                continue\n        else:\n            buf += chr(ch)\n        try:\n            unicode_character = buf.decode(locale.getpreferredencoding())\n        except UnicodeDecodeError:\n            # We are dealing with an incomplete multi-byte character.\n            pass\n        else:\n            buf = \"\"\n            result = controller.process_input(unicode_character)\n            if result:\n                return result\n\n\nclass _Screen(object):\n\n    def __init__(self, curses_screen):\n        self._curses_screen = curses_screen\n\n    def getmaxyx(self):\n        return self._curses_screen.getmaxyx()\n\n    def erase(self):\n        return self._curses_screen.erase()\n\n    def addstr(self, y, x, text, style):\n        if style == \"highlight\":\n            attrs = curses.A_BOLD\n            if curses.has_colors():\n                attrs |= curses.color_pair(1)\n        elif style == \"select\":\n            attrs = curses.A_BOLD\n            if curses.has_colors():\n                attrs |= curses.color_pair(2)\n        elif style == \"status\":\n            attrs = curses.A_REVERSE | curses.A_BOLD\n        else:\n            attrs = 0\n        try:\n            self._curses_screen.addstr(y, x, self._encode(text), attrs)\n        except curses.error:\n            # Writing last position (max_y, max_x) fails, but we can ignore it.\n            pass\n\n    def refresh(self):\n        return self._curses_screen.refresh()\n\n    def _encode(self, text):\n        return text.encode(locale.getpreferredencoding())\n",
            "timestamp_created": "2021-06-19T12:02:59.056365",
            "type": "code"
        },
        "442bbab5f6e74d77b7f52e762d0b8176": {
            "chunkpath": [],
            "filepath": [
                "COPYING"
            ],
            "fragments": [
                {
                    "text": "                    GNU GENERAL PUBLIC LICENSE",
                    "type": "line"
                },
                {
                    "text": "                       Version 3, 29 June 2007",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": " Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>",
                    "type": "line"
                },
                {
                    "text": " Everyone is permitted to copy and distribute verbatim copies",
                    "type": "line"
                },
                {
                    "text": " of this license document, but changing it is not allowed.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "                            Preamble",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  The GNU General Public License is a free, copyleft license for",
                    "type": "line"
                },
                {
                    "text": "software and other kinds of works.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  The licenses for most software and other practical works are designed",
                    "type": "line"
                },
                {
                    "text": "to take away your freedom to share and change the works.  By contrast,",
                    "type": "line"
                },
                {
                    "text": "the GNU General Public License is intended to guarantee your freedom to",
                    "type": "line"
                },
                {
                    "text": "share and change all versions of a program--to make sure it remains free",
                    "type": "line"
                },
                {
                    "text": "software for all its users.  We, the Free Software Foundation, use the",
                    "type": "line"
                },
                {
                    "text": "GNU General Public License for most of our software; it applies also to",
                    "type": "line"
                },
                {
                    "text": "any other work released this way by its authors.  You can apply it to",
                    "type": "line"
                },
                {
                    "text": "your programs, too.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  When we speak of free software, we are referring to freedom, not",
                    "type": "line"
                },
                {
                    "text": "price.  Our General Public Licenses are designed to make sure that you",
                    "type": "line"
                },
                {
                    "text": "have the freedom to distribute copies of free software (and charge for",
                    "type": "line"
                },
                {
                    "text": "them if you wish), that you receive source code or can get it if you",
                    "type": "line"
                },
                {
                    "text": "want it, that you can change the software or use pieces of it in new",
                    "type": "line"
                },
                {
                    "text": "free programs, and that you know you can do these things.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  To protect your rights, we need to prevent others from denying you",
                    "type": "line"
                },
                {
                    "text": "these rights or asking you to surrender the rights.  Therefore, you have",
                    "type": "line"
                },
                {
                    "text": "certain responsibilities if you distribute copies of the software, or if",
                    "type": "line"
                },
                {
                    "text": "you modify it: responsibilities to respect the freedom of others.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  For example, if you distribute copies of such a program, whether",
                    "type": "line"
                },
                {
                    "text": "gratis or for a fee, you must pass on to the recipients the same",
                    "type": "line"
                },
                {
                    "text": "freedoms that you received.  You must make sure that they, too, receive",
                    "type": "line"
                },
                {
                    "text": "or can get the source code.  And you must show them these terms so they",
                    "type": "line"
                },
                {
                    "text": "know their rights.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Developers that use the GNU GPL protect your rights with two steps:",
                    "type": "line"
                },
                {
                    "text": "(1) assert copyright on the software, and (2) offer you this License",
                    "type": "line"
                },
                {
                    "text": "giving you legal permission to copy, distribute and/or modify it.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  For the developers' and authors' protection, the GPL clearly explains",
                    "type": "line"
                },
                {
                    "text": "that there is no warranty for this free software.  For both users' and",
                    "type": "line"
                },
                {
                    "text": "authors' sake, the GPL requires that modified versions be marked as",
                    "type": "line"
                },
                {
                    "text": "changed, so that their problems will not be attributed erroneously to",
                    "type": "line"
                },
                {
                    "text": "authors of previous versions.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Some devices are designed to deny users access to install or run",
                    "type": "line"
                },
                {
                    "text": "modified versions of the software inside them, although the manufacturer",
                    "type": "line"
                },
                {
                    "text": "can do so.  This is fundamentally incompatible with the aim of",
                    "type": "line"
                },
                {
                    "text": "protecting users' freedom to change the software.  The systematic",
                    "type": "line"
                },
                {
                    "text": "pattern of such abuse occurs in the area of products for individuals to",
                    "type": "line"
                },
                {
                    "text": "use, which is precisely where it is most unacceptable.  Therefore, we",
                    "type": "line"
                },
                {
                    "text": "have designed this version of the GPL to prohibit the practice for those",
                    "type": "line"
                },
                {
                    "text": "products.  If such problems arise substantially in other domains, we",
                    "type": "line"
                },
                {
                    "text": "stand ready to extend this provision to those domains in future versions",
                    "type": "line"
                },
                {
                    "text": "of the GPL, as needed to protect the freedom of users.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Finally, every program is threatened constantly by software patents.",
                    "type": "line"
                },
                {
                    "text": "States should not allow patents to restrict development and use of",
                    "type": "line"
                },
                {
                    "text": "software on general-purpose computers, but in those that do, we wish to",
                    "type": "line"
                },
                {
                    "text": "avoid the special danger that patents applied to a free program could",
                    "type": "line"
                },
                {
                    "text": "make it effectively proprietary.  To prevent this, the GPL assures that",
                    "type": "line"
                },
                {
                    "text": "patents cannot be used to render the program non-free.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  The precise terms and conditions for copying, distribution and",
                    "type": "line"
                },
                {
                    "text": "modification follow.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "                       TERMS AND CONDITIONS",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  0. Definitions.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  \"This License\" refers to version 3 of the GNU General Public License.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  \"Copyright\" also means copyright-like laws that apply to other kinds of",
                    "type": "line"
                },
                {
                    "text": "works, such as semiconductor masks.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  \"The Program\" refers to any copyrightable work licensed under this",
                    "type": "line"
                },
                {
                    "text": "License.  Each licensee is addressed as \"you\".  \"Licensees\" and",
                    "type": "line"
                },
                {
                    "text": "\"recipients\" may be individuals or organizations.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  To \"modify\" a work means to copy from or adapt all or part of the work",
                    "type": "line"
                },
                {
                    "text": "in a fashion requiring copyright permission, other than the making of an",
                    "type": "line"
                },
                {
                    "text": "exact copy.  The resulting work is called a \"modified version\" of the",
                    "type": "line"
                },
                {
                    "text": "earlier work or a work \"based on\" the earlier work.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  A \"covered work\" means either the unmodified Program or a work based",
                    "type": "line"
                },
                {
                    "text": "on the Program.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  To \"propagate\" a work means to do anything with it that, without",
                    "type": "line"
                },
                {
                    "text": "permission, would make you directly or secondarily liable for",
                    "type": "line"
                },
                {
                    "text": "infringement under applicable copyright law, except executing it on a",
                    "type": "line"
                },
                {
                    "text": "computer or modifying a private copy.  Propagation includes copying,",
                    "type": "line"
                },
                {
                    "text": "distribution (with or without modification), making available to the",
                    "type": "line"
                },
                {
                    "text": "public, and in some countries other activities as well.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  To \"convey\" a work means any kind of propagation that enables other",
                    "type": "line"
                },
                {
                    "text": "parties to make or receive copies.  Mere interaction with a user through",
                    "type": "line"
                },
                {
                    "text": "a computer network, with no transfer of a copy, is not conveying.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  An interactive user interface displays \"Appropriate Legal Notices\"",
                    "type": "line"
                },
                {
                    "text": "to the extent that it includes a convenient and prominently visible",
                    "type": "line"
                },
                {
                    "text": "feature that (1) displays an appropriate copyright notice, and (2)",
                    "type": "line"
                },
                {
                    "text": "tells the user that there is no warranty for the work (except to the",
                    "type": "line"
                },
                {
                    "text": "extent that warranties are provided), that licensees may convey the",
                    "type": "line"
                },
                {
                    "text": "work under this License, and how to view a copy of this License.  If",
                    "type": "line"
                },
                {
                    "text": "the interface presents a list of user commands or options, such as a",
                    "type": "line"
                },
                {
                    "text": "menu, a prominent item in the list meets this criterion.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  1. Source Code.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  The \"source code\" for a work means the preferred form of the work",
                    "type": "line"
                },
                {
                    "text": "for making modifications to it.  \"Object code\" means any non-source",
                    "type": "line"
                },
                {
                    "text": "form of a work.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  A \"Standard Interface\" means an interface that either is an official",
                    "type": "line"
                },
                {
                    "text": "standard defined by a recognized standards body, or, in the case of",
                    "type": "line"
                },
                {
                    "text": "interfaces specified for a particular programming language, one that",
                    "type": "line"
                },
                {
                    "text": "is widely used among developers working in that language.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  The \"System Libraries\" of an executable work include anything, other",
                    "type": "line"
                },
                {
                    "text": "than the work as a whole, that (a) is included in the normal form of",
                    "type": "line"
                },
                {
                    "text": "packaging a Major Component, but which is not part of that Major",
                    "type": "line"
                },
                {
                    "text": "Component, and (b) serves only to enable use of the work with that",
                    "type": "line"
                },
                {
                    "text": "Major Component, or to implement a Standard Interface for which an",
                    "type": "line"
                },
                {
                    "text": "implementation is available to the public in source code form.  A",
                    "type": "line"
                },
                {
                    "text": "\"Major Component\", in this context, means a major essential component",
                    "type": "line"
                },
                {
                    "text": "(kernel, window system, and so on) of the specific operating system",
                    "type": "line"
                },
                {
                    "text": "(if any) on which the executable work runs, or a compiler used to",
                    "type": "line"
                },
                {
                    "text": "produce the work, or an object code interpreter used to run it.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  The \"Corresponding Source\" for a work in object code form means all",
                    "type": "line"
                },
                {
                    "text": "the source code needed to generate, install, and (for an executable",
                    "type": "line"
                },
                {
                    "text": "work) run the object code and to modify the work, including scripts to",
                    "type": "line"
                },
                {
                    "text": "control those activities.  However, it does not include the work's",
                    "type": "line"
                },
                {
                    "text": "System Libraries, or general-purpose tools or generally available free",
                    "type": "line"
                },
                {
                    "text": "programs which are used unmodified in performing those activities but",
                    "type": "line"
                },
                {
                    "text": "which are not part of the work.  For example, Corresponding Source",
                    "type": "line"
                },
                {
                    "text": "includes interface definition files associated with source files for",
                    "type": "line"
                },
                {
                    "text": "the work, and the source code for shared libraries and dynamically",
                    "type": "line"
                },
                {
                    "text": "linked subprograms that the work is specifically designed to require,",
                    "type": "line"
                },
                {
                    "text": "such as by intimate data communication or control flow between those",
                    "type": "line"
                },
                {
                    "text": "subprograms and other parts of the work.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  The Corresponding Source need not include anything that users",
                    "type": "line"
                },
                {
                    "text": "can regenerate automatically from other parts of the Corresponding",
                    "type": "line"
                },
                {
                    "text": "Source.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  The Corresponding Source for a work in source code form is that",
                    "type": "line"
                },
                {
                    "text": "same work.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  2. Basic Permissions.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  All rights granted under this License are granted for the term of",
                    "type": "line"
                },
                {
                    "text": "copyright on the Program, and are irrevocable provided the stated",
                    "type": "line"
                },
                {
                    "text": "conditions are met.  This License explicitly affirms your unlimited",
                    "type": "line"
                },
                {
                    "text": "permission to run the unmodified Program.  The output from running a",
                    "type": "line"
                },
                {
                    "text": "covered work is covered by this License only if the output, given its",
                    "type": "line"
                },
                {
                    "text": "content, constitutes a covered work.  This License acknowledges your",
                    "type": "line"
                },
                {
                    "text": "rights of fair use or other equivalent, as provided by copyright law.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  You may make, run and propagate covered works that you do not",
                    "type": "line"
                },
                {
                    "text": "convey, without conditions so long as your license otherwise remains",
                    "type": "line"
                },
                {
                    "text": "in force.  You may convey covered works to others for the sole purpose",
                    "type": "line"
                },
                {
                    "text": "of having them make modifications exclusively for you, or provide you",
                    "type": "line"
                },
                {
                    "text": "with facilities for running those works, provided that you comply with",
                    "type": "line"
                },
                {
                    "text": "the terms of this License in conveying all material for which you do",
                    "type": "line"
                },
                {
                    "text": "not control copyright.  Those thus making or running the covered works",
                    "type": "line"
                },
                {
                    "text": "for you must do so exclusively on your behalf, under your direction",
                    "type": "line"
                },
                {
                    "text": "and control, on terms that prohibit them from making any copies of",
                    "type": "line"
                },
                {
                    "text": "your copyrighted material outside their relationship with you.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Conveying under any other circumstances is permitted solely under",
                    "type": "line"
                },
                {
                    "text": "the conditions stated below.  Sublicensing is not allowed; section 10",
                    "type": "line"
                },
                {
                    "text": "makes it unnecessary.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  3. Protecting Users' Legal Rights From Anti-Circumvention Law.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  No covered work shall be deemed part of an effective technological",
                    "type": "line"
                },
                {
                    "text": "measure under any applicable law fulfilling obligations under article",
                    "type": "line"
                },
                {
                    "text": "11 of the WIPO copyright treaty adopted on 20 December 1996, or",
                    "type": "line"
                },
                {
                    "text": "similar laws prohibiting or restricting circumvention of such",
                    "type": "line"
                },
                {
                    "text": "measures.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  When you convey a covered work, you waive any legal power to forbid",
                    "type": "line"
                },
                {
                    "text": "circumvention of technological measures to the extent such circumvention",
                    "type": "line"
                },
                {
                    "text": "is effected by exercising rights under this License with respect to",
                    "type": "line"
                },
                {
                    "text": "the covered work, and you disclaim any intention to limit operation or",
                    "type": "line"
                },
                {
                    "text": "modification of the work as a means of enforcing, against the work's",
                    "type": "line"
                },
                {
                    "text": "users, your or third parties' legal rights to forbid circumvention of",
                    "type": "line"
                },
                {
                    "text": "technological measures.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  4. Conveying Verbatim Copies.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  You may convey verbatim copies of the Program's source code as you",
                    "type": "line"
                },
                {
                    "text": "receive it, in any medium, provided that you conspicuously and",
                    "type": "line"
                },
                {
                    "text": "appropriately publish on each copy an appropriate copyright notice;",
                    "type": "line"
                },
                {
                    "text": "keep intact all notices stating that this License and any",
                    "type": "line"
                },
                {
                    "text": "non-permissive terms added in accord with section 7 apply to the code;",
                    "type": "line"
                },
                {
                    "text": "keep intact all notices of the absence of any warranty; and give all",
                    "type": "line"
                },
                {
                    "text": "recipients a copy of this License along with the Program.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  You may charge any price or no price for each copy that you convey,",
                    "type": "line"
                },
                {
                    "text": "and you may offer support or warranty protection for a fee.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  5. Conveying Modified Source Versions.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  You may convey a work based on the Program, or the modifications to",
                    "type": "line"
                },
                {
                    "text": "produce it from the Program, in the form of source code under the",
                    "type": "line"
                },
                {
                    "text": "terms of section 4, provided that you also meet all of these conditions:",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    a) The work must carry prominent notices stating that you modified",
                    "type": "line"
                },
                {
                    "text": "    it, and giving a relevant date.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    b) The work must carry prominent notices stating that it is",
                    "type": "line"
                },
                {
                    "text": "    released under this License and any conditions added under section",
                    "type": "line"
                },
                {
                    "text": "    7.  This requirement modifies the requirement in section 4 to",
                    "type": "line"
                },
                {
                    "text": "    \"keep intact all notices\".",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    c) You must license the entire work, as a whole, under this",
                    "type": "line"
                },
                {
                    "text": "    License to anyone who comes into possession of a copy.  This",
                    "type": "line"
                },
                {
                    "text": "    License will therefore apply, along with any applicable section 7",
                    "type": "line"
                },
                {
                    "text": "    additional terms, to the whole of the work, and all its parts,",
                    "type": "line"
                },
                {
                    "text": "    regardless of how they are packaged.  This License gives no",
                    "type": "line"
                },
                {
                    "text": "    permission to license the work in any other way, but it does not",
                    "type": "line"
                },
                {
                    "text": "    invalidate such permission if you have separately received it.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    d) If the work has interactive user interfaces, each must display",
                    "type": "line"
                },
                {
                    "text": "    Appropriate Legal Notices; however, if the Program has interactive",
                    "type": "line"
                },
                {
                    "text": "    interfaces that do not display Appropriate Legal Notices, your",
                    "type": "line"
                },
                {
                    "text": "    work need not make them do so.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  A compilation of a covered work with other separate and independent",
                    "type": "line"
                },
                {
                    "text": "works, which are not by their nature extensions of the covered work,",
                    "type": "line"
                },
                {
                    "text": "and which are not combined with it such as to form a larger program,",
                    "type": "line"
                },
                {
                    "text": "in or on a volume of a storage or distribution medium, is called an",
                    "type": "line"
                },
                {
                    "text": "\"aggregate\" if the compilation and its resulting copyright are not",
                    "type": "line"
                },
                {
                    "text": "used to limit the access or legal rights of the compilation's users",
                    "type": "line"
                },
                {
                    "text": "beyond what the individual works permit.  Inclusion of a covered work",
                    "type": "line"
                },
                {
                    "text": "in an aggregate does not cause this License to apply to the other",
                    "type": "line"
                },
                {
                    "text": "parts of the aggregate.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  6. Conveying Non-Source Forms.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  You may convey a covered work in object code form under the terms",
                    "type": "line"
                },
                {
                    "text": "of sections 4 and 5, provided that you also convey the",
                    "type": "line"
                },
                {
                    "text": "machine-readable Corresponding Source under the terms of this License,",
                    "type": "line"
                },
                {
                    "text": "in one of these ways:",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    a) Convey the object code in, or embodied in, a physical product",
                    "type": "line"
                },
                {
                    "text": "    (including a physical distribution medium), accompanied by the",
                    "type": "line"
                },
                {
                    "text": "    Corresponding Source fixed on a durable physical medium",
                    "type": "line"
                },
                {
                    "text": "    customarily used for software interchange.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    b) Convey the object code in, or embodied in, a physical product",
                    "type": "line"
                },
                {
                    "text": "    (including a physical distribution medium), accompanied by a",
                    "type": "line"
                },
                {
                    "text": "    written offer, valid for at least three years and valid for as",
                    "type": "line"
                },
                {
                    "text": "    long as you offer spare parts or customer support for that product",
                    "type": "line"
                },
                {
                    "text": "    model, to give anyone who possesses the object code either (1) a",
                    "type": "line"
                },
                {
                    "text": "    copy of the Corresponding Source for all the software in the",
                    "type": "line"
                },
                {
                    "text": "    product that is covered by this License, on a durable physical",
                    "type": "line"
                },
                {
                    "text": "    medium customarily used for software interchange, for a price no",
                    "type": "line"
                },
                {
                    "text": "    more than your reasonable cost of physically performing this",
                    "type": "line"
                },
                {
                    "text": "    conveying of source, or (2) access to copy the",
                    "type": "line"
                },
                {
                    "text": "    Corresponding Source from a network server at no charge.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    c) Convey individual copies of the object code with a copy of the",
                    "type": "line"
                },
                {
                    "text": "    written offer to provide the Corresponding Source.  This",
                    "type": "line"
                },
                {
                    "text": "    alternative is allowed only occasionally and noncommercially, and",
                    "type": "line"
                },
                {
                    "text": "    only if you received the object code with such an offer, in accord",
                    "type": "line"
                },
                {
                    "text": "    with subsection 6b.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    d) Convey the object code by offering access from a designated",
                    "type": "line"
                },
                {
                    "text": "    place (gratis or for a charge), and offer equivalent access to the",
                    "type": "line"
                },
                {
                    "text": "    Corresponding Source in the same way through the same place at no",
                    "type": "line"
                },
                {
                    "text": "    further charge.  You need not require recipients to copy the",
                    "type": "line"
                },
                {
                    "text": "    Corresponding Source along with the object code.  If the place to",
                    "type": "line"
                },
                {
                    "text": "    copy the object code is a network server, the Corresponding Source",
                    "type": "line"
                },
                {
                    "text": "    may be on a different server (operated by you or a third party)",
                    "type": "line"
                },
                {
                    "text": "    that supports equivalent copying facilities, provided you maintain",
                    "type": "line"
                },
                {
                    "text": "    clear directions next to the object code saying where to find the",
                    "type": "line"
                },
                {
                    "text": "    Corresponding Source.  Regardless of what server hosts the",
                    "type": "line"
                },
                {
                    "text": "    Corresponding Source, you remain obligated to ensure that it is",
                    "type": "line"
                },
                {
                    "text": "    available for as long as needed to satisfy these requirements.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    e) Convey the object code using peer-to-peer transmission, provided",
                    "type": "line"
                },
                {
                    "text": "    you inform other peers where the object code and Corresponding",
                    "type": "line"
                },
                {
                    "text": "    Source of the work are being offered to the general public at no",
                    "type": "line"
                },
                {
                    "text": "    charge under subsection 6d.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  A separable portion of the object code, whose source code is excluded",
                    "type": "line"
                },
                {
                    "text": "from the Corresponding Source as a System Library, need not be",
                    "type": "line"
                },
                {
                    "text": "included in conveying the object code work.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  A \"User Product\" is either (1) a \"consumer product\", which means any",
                    "type": "line"
                },
                {
                    "text": "tangible personal property which is normally used for personal, family,",
                    "type": "line"
                },
                {
                    "text": "or household purposes, or (2) anything designed or sold for incorporation",
                    "type": "line"
                },
                {
                    "text": "into a dwelling.  In determining whether a product is a consumer product,",
                    "type": "line"
                },
                {
                    "text": "doubtful cases shall be resolved in favor of coverage.  For a particular",
                    "type": "line"
                },
                {
                    "text": "product received by a particular user, \"normally used\" refers to a",
                    "type": "line"
                },
                {
                    "text": "typical or common use of that class of product, regardless of the status",
                    "type": "line"
                },
                {
                    "text": "of the particular user or of the way in which the particular user",
                    "type": "line"
                },
                {
                    "text": "actually uses, or expects or is expected to use, the product.  A product",
                    "type": "line"
                },
                {
                    "text": "is a consumer product regardless of whether the product has substantial",
                    "type": "line"
                },
                {
                    "text": "commercial, industrial or non-consumer uses, unless such uses represent",
                    "type": "line"
                },
                {
                    "text": "the only significant mode of use of the product.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  \"Installation Information\" for a User Product means any methods,",
                    "type": "line"
                },
                {
                    "text": "procedures, authorization keys, or other information required to install",
                    "type": "line"
                },
                {
                    "text": "and execute modified versions of a covered work in that User Product from",
                    "type": "line"
                },
                {
                    "text": "a modified version of its Corresponding Source.  The information must",
                    "type": "line"
                },
                {
                    "text": "suffice to ensure that the continued functioning of the modified object",
                    "type": "line"
                },
                {
                    "text": "code is in no case prevented or interfered with solely because",
                    "type": "line"
                },
                {
                    "text": "modification has been made.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  If you convey an object code work under this section in, or with, or",
                    "type": "line"
                },
                {
                    "text": "specifically for use in, a User Product, and the conveying occurs as",
                    "type": "line"
                },
                {
                    "text": "part of a transaction in which the right of possession and use of the",
                    "type": "line"
                },
                {
                    "text": "User Product is transferred to the recipient in perpetuity or for a",
                    "type": "line"
                },
                {
                    "text": "fixed term (regardless of how the transaction is characterized), the",
                    "type": "line"
                },
                {
                    "text": "Corresponding Source conveyed under this section must be accompanied",
                    "type": "line"
                },
                {
                    "text": "by the Installation Information.  But this requirement does not apply",
                    "type": "line"
                },
                {
                    "text": "if neither you nor any third party retains the ability to install",
                    "type": "line"
                },
                {
                    "text": "modified object code on the User Product (for example, the work has",
                    "type": "line"
                },
                {
                    "text": "been installed in ROM).",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  The requirement to provide Installation Information does not include a",
                    "type": "line"
                },
                {
                    "text": "requirement to continue to provide support service, warranty, or updates",
                    "type": "line"
                },
                {
                    "text": "for a work that has been modified or installed by the recipient, or for",
                    "type": "line"
                },
                {
                    "text": "the User Product in which it has been modified or installed.  Access to a",
                    "type": "line"
                },
                {
                    "text": "network may be denied when the modification itself materially and",
                    "type": "line"
                },
                {
                    "text": "adversely affects the operation of the network or violates the rules and",
                    "type": "line"
                },
                {
                    "text": "protocols for communication across the network.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Corresponding Source conveyed, and Installation Information provided,",
                    "type": "line"
                },
                {
                    "text": "in accord with this section must be in a format that is publicly",
                    "type": "line"
                },
                {
                    "text": "documented (and with an implementation available to the public in",
                    "type": "line"
                },
                {
                    "text": "source code form), and must require no special password or key for",
                    "type": "line"
                },
                {
                    "text": "unpacking, reading or copying.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  7. Additional Terms.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  \"Additional permissions\" are terms that supplement the terms of this",
                    "type": "line"
                },
                {
                    "text": "License by making exceptions from one or more of its conditions.",
                    "type": "line"
                },
                {
                    "text": "Additional permissions that are applicable to the entire Program shall",
                    "type": "line"
                },
                {
                    "text": "be treated as though they were included in this License, to the extent",
                    "type": "line"
                },
                {
                    "text": "that they are valid under applicable law.  If additional permissions",
                    "type": "line"
                },
                {
                    "text": "apply only to part of the Program, that part may be used separately",
                    "type": "line"
                },
                {
                    "text": "under those permissions, but the entire Program remains governed by",
                    "type": "line"
                },
                {
                    "text": "this License without regard to the additional permissions.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  When you convey a copy of a covered work, you may at your option",
                    "type": "line"
                },
                {
                    "text": "remove any additional permissions from that copy, or from any part of",
                    "type": "line"
                },
                {
                    "text": "it.  (Additional permissions may be written to require their own",
                    "type": "line"
                },
                {
                    "text": "removal in certain cases when you modify the work.)  You may place",
                    "type": "line"
                },
                {
                    "text": "additional permissions on material, added by you to a covered work,",
                    "type": "line"
                },
                {
                    "text": "for which you have or can give appropriate copyright permission.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Notwithstanding any other provision of this License, for material you",
                    "type": "line"
                },
                {
                    "text": "add to a covered work, you may (if authorized by the copyright holders of",
                    "type": "line"
                },
                {
                    "text": "that material) supplement the terms of this License with terms:",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    a) Disclaiming warranty or limiting liability differently from the",
                    "type": "line"
                },
                {
                    "text": "    terms of sections 15 and 16 of this License; or",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    b) Requiring preservation of specified reasonable legal notices or",
                    "type": "line"
                },
                {
                    "text": "    author attributions in that material or in the Appropriate Legal",
                    "type": "line"
                },
                {
                    "text": "    Notices displayed by works containing it; or",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    c) Prohibiting misrepresentation of the origin of that material, or",
                    "type": "line"
                },
                {
                    "text": "    requiring that modified versions of such material be marked in",
                    "type": "line"
                },
                {
                    "text": "    reasonable ways as different from the original version; or",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    d) Limiting the use for publicity purposes of names of licensors or",
                    "type": "line"
                },
                {
                    "text": "    authors of the material; or",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    e) Declining to grant rights under trademark law for use of some",
                    "type": "line"
                },
                {
                    "text": "    trade names, trademarks, or service marks; or",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    f) Requiring indemnification of licensors and authors of that",
                    "type": "line"
                },
                {
                    "text": "    material by anyone who conveys the material (or modified versions of",
                    "type": "line"
                },
                {
                    "text": "    it) with contractual assumptions of liability to the recipient, for",
                    "type": "line"
                },
                {
                    "text": "    any liability that these contractual assumptions directly impose on",
                    "type": "line"
                },
                {
                    "text": "    those licensors and authors.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  All other non-permissive additional terms are considered \"further",
                    "type": "line"
                },
                {
                    "text": "restrictions\" within the meaning of section 10.  If the Program as you",
                    "type": "line"
                },
                {
                    "text": "received it, or any part of it, contains a notice stating that it is",
                    "type": "line"
                },
                {
                    "text": "governed by this License along with a term that is a further",
                    "type": "line"
                },
                {
                    "text": "restriction, you may remove that term.  If a license document contains",
                    "type": "line"
                },
                {
                    "text": "a further restriction but permits relicensing or conveying under this",
                    "type": "line"
                },
                {
                    "text": "License, you may add to a covered work material governed by the terms",
                    "type": "line"
                },
                {
                    "text": "of that license document, provided that the further restriction does",
                    "type": "line"
                },
                {
                    "text": "not survive such relicensing or conveying.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  If you add terms to a covered work in accord with this section, you",
                    "type": "line"
                },
                {
                    "text": "must place, in the relevant source files, a statement of the",
                    "type": "line"
                },
                {
                    "text": "additional terms that apply to those files, or a notice indicating",
                    "type": "line"
                },
                {
                    "text": "where to find the applicable terms.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Additional terms, permissive or non-permissive, may be stated in the",
                    "type": "line"
                },
                {
                    "text": "form of a separately written license, or stated as exceptions;",
                    "type": "line"
                },
                {
                    "text": "the above requirements apply either way.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  8. Termination.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  You may not propagate or modify a covered work except as expressly",
                    "type": "line"
                },
                {
                    "text": "provided under this License.  Any attempt otherwise to propagate or",
                    "type": "line"
                },
                {
                    "text": "modify it is void, and will automatically terminate your rights under",
                    "type": "line"
                },
                {
                    "text": "this License (including any patent licenses granted under the third",
                    "type": "line"
                },
                {
                    "text": "paragraph of section 11).",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  However, if you cease all violation of this License, then your",
                    "type": "line"
                },
                {
                    "text": "license from a particular copyright holder is reinstated (a)",
                    "type": "line"
                },
                {
                    "text": "provisionally, unless and until the copyright holder explicitly and",
                    "type": "line"
                },
                {
                    "text": "finally terminates your license, and (b) permanently, if the copyright",
                    "type": "line"
                },
                {
                    "text": "holder fails to notify you of the violation by some reasonable means",
                    "type": "line"
                },
                {
                    "text": "prior to 60 days after the cessation.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Moreover, your license from a particular copyright holder is",
                    "type": "line"
                },
                {
                    "text": "reinstated permanently if the copyright holder notifies you of the",
                    "type": "line"
                },
                {
                    "text": "violation by some reasonable means, this is the first time you have",
                    "type": "line"
                },
                {
                    "text": "received notice of violation of this License (for any work) from that",
                    "type": "line"
                },
                {
                    "text": "copyright holder, and you cure the violation prior to 30 days after",
                    "type": "line"
                },
                {
                    "text": "your receipt of the notice.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Termination of your rights under this section does not terminate the",
                    "type": "line"
                },
                {
                    "text": "licenses of parties who have received copies or rights from you under",
                    "type": "line"
                },
                {
                    "text": "this License.  If your rights have been terminated and not permanently",
                    "type": "line"
                },
                {
                    "text": "reinstated, you do not qualify to receive new licenses for the same",
                    "type": "line"
                },
                {
                    "text": "material under section 10.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  9. Acceptance Not Required for Having Copies.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  You are not required to accept this License in order to receive or",
                    "type": "line"
                },
                {
                    "text": "run a copy of the Program.  Ancillary propagation of a covered work",
                    "type": "line"
                },
                {
                    "text": "occurring solely as a consequence of using peer-to-peer transmission",
                    "type": "line"
                },
                {
                    "text": "to receive a copy likewise does not require acceptance.  However,",
                    "type": "line"
                },
                {
                    "text": "nothing other than this License grants you permission to propagate or",
                    "type": "line"
                },
                {
                    "text": "modify any covered work.  These actions infringe copyright if you do",
                    "type": "line"
                },
                {
                    "text": "not accept this License.  Therefore, by modifying or propagating a",
                    "type": "line"
                },
                {
                    "text": "covered work, you indicate your acceptance of this License to do so.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  10. Automatic Licensing of Downstream Recipients.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Each time you convey a covered work, the recipient automatically",
                    "type": "line"
                },
                {
                    "text": "receives a license from the original licensors, to run, modify and",
                    "type": "line"
                },
                {
                    "text": "propagate that work, subject to this License.  You are not responsible",
                    "type": "line"
                },
                {
                    "text": "for enforcing compliance by third parties with this License.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  An \"entity transaction\" is a transaction transferring control of an",
                    "type": "line"
                },
                {
                    "text": "organization, or substantially all assets of one, or subdividing an",
                    "type": "line"
                },
                {
                    "text": "organization, or merging organizations.  If propagation of a covered",
                    "type": "line"
                },
                {
                    "text": "work results from an entity transaction, each party to that",
                    "type": "line"
                },
                {
                    "text": "transaction who receives a copy of the work also receives whatever",
                    "type": "line"
                },
                {
                    "text": "licenses to the work the party's predecessor in interest had or could",
                    "type": "line"
                },
                {
                    "text": "give under the previous paragraph, plus a right to possession of the",
                    "type": "line"
                },
                {
                    "text": "Corresponding Source of the work from the predecessor in interest, if",
                    "type": "line"
                },
                {
                    "text": "the predecessor has it or can get it with reasonable efforts.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  You may not impose any further restrictions on the exercise of the",
                    "type": "line"
                },
                {
                    "text": "rights granted or affirmed under this License.  For example, you may",
                    "type": "line"
                },
                {
                    "text": "not impose a license fee, royalty, or other charge for exercise of",
                    "type": "line"
                },
                {
                    "text": "rights granted under this License, and you may not initiate litigation",
                    "type": "line"
                },
                {
                    "text": "(including a cross-claim or counterclaim in a lawsuit) alleging that",
                    "type": "line"
                },
                {
                    "text": "any patent claim is infringed by making, using, selling, offering for",
                    "type": "line"
                },
                {
                    "text": "sale, or importing the Program or any portion of it.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  11. Patents.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  A \"contributor\" is a copyright holder who authorizes use under this",
                    "type": "line"
                },
                {
                    "text": "License of the Program or a work on which the Program is based.  The",
                    "type": "line"
                },
                {
                    "text": "work thus licensed is called the contributor's \"contributor version\".",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  A contributor's \"essential patent claims\" are all patent claims",
                    "type": "line"
                },
                {
                    "text": "owned or controlled by the contributor, whether already acquired or",
                    "type": "line"
                },
                {
                    "text": "hereafter acquired, that would be infringed by some manner, permitted",
                    "type": "line"
                },
                {
                    "text": "by this License, of making, using, or selling its contributor version,",
                    "type": "line"
                },
                {
                    "text": "but do not include claims that would be infringed only as a",
                    "type": "line"
                },
                {
                    "text": "consequence of further modification of the contributor version.  For",
                    "type": "line"
                },
                {
                    "text": "purposes of this definition, \"control\" includes the right to grant",
                    "type": "line"
                },
                {
                    "text": "patent sublicenses in a manner consistent with the requirements of",
                    "type": "line"
                },
                {
                    "text": "this License.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Each contributor grants you a non-exclusive, worldwide, royalty-free",
                    "type": "line"
                },
                {
                    "text": "patent license under the contributor's essential patent claims, to",
                    "type": "line"
                },
                {
                    "text": "make, use, sell, offer for sale, import and otherwise run, modify and",
                    "type": "line"
                },
                {
                    "text": "propagate the contents of its contributor version.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  In the following three paragraphs, a \"patent license\" is any express",
                    "type": "line"
                },
                {
                    "text": "agreement or commitment, however denominated, not to enforce a patent",
                    "type": "line"
                },
                {
                    "text": "(such as an express permission to practice a patent or covenant not to",
                    "type": "line"
                },
                {
                    "text": "sue for patent infringement).  To \"grant\" such a patent license to a",
                    "type": "line"
                },
                {
                    "text": "party means to make such an agreement or commitment not to enforce a",
                    "type": "line"
                },
                {
                    "text": "patent against the party.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  If you convey a covered work, knowingly relying on a patent license,",
                    "type": "line"
                },
                {
                    "text": "and the Corresponding Source of the work is not available for anyone",
                    "type": "line"
                },
                {
                    "text": "to copy, free of charge and under the terms of this License, through a",
                    "type": "line"
                },
                {
                    "text": "publicly available network server or other readily accessible means,",
                    "type": "line"
                },
                {
                    "text": "then you must either (1) cause the Corresponding Source to be so",
                    "type": "line"
                },
                {
                    "text": "available, or (2) arrange to deprive yourself of the benefit of the",
                    "type": "line"
                },
                {
                    "text": "patent license for this particular work, or (3) arrange, in a manner",
                    "type": "line"
                },
                {
                    "text": "consistent with the requirements of this License, to extend the patent",
                    "type": "line"
                },
                {
                    "text": "license to downstream recipients.  \"Knowingly relying\" means you have",
                    "type": "line"
                },
                {
                    "text": "actual knowledge that, but for the patent license, your conveying the",
                    "type": "line"
                },
                {
                    "text": "covered work in a country, or your recipient's use of the covered work",
                    "type": "line"
                },
                {
                    "text": "in a country, would infringe one or more identifiable patents in that",
                    "type": "line"
                },
                {
                    "text": "country that you have reason to believe are valid.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  If, pursuant to or in connection with a single transaction or",
                    "type": "line"
                },
                {
                    "text": "arrangement, you convey, or propagate by procuring conveyance of, a",
                    "type": "line"
                },
                {
                    "text": "covered work, and grant a patent license to some of the parties",
                    "type": "line"
                },
                {
                    "text": "receiving the covered work authorizing them to use, propagate, modify",
                    "type": "line"
                },
                {
                    "text": "or convey a specific copy of the covered work, then the patent license",
                    "type": "line"
                },
                {
                    "text": "you grant is automatically extended to all recipients of the covered",
                    "type": "line"
                },
                {
                    "text": "work and works based on it.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  A patent license is \"discriminatory\" if it does not include within",
                    "type": "line"
                },
                {
                    "text": "the scope of its coverage, prohibits the exercise of, or is",
                    "type": "line"
                },
                {
                    "text": "conditioned on the non-exercise of one or more of the rights that are",
                    "type": "line"
                },
                {
                    "text": "specifically granted under this License.  You may not convey a covered",
                    "type": "line"
                },
                {
                    "text": "work if you are a party to an arrangement with a third party that is",
                    "type": "line"
                },
                {
                    "text": "in the business of distributing software, under which you make payment",
                    "type": "line"
                },
                {
                    "text": "to the third party based on the extent of your activity of conveying",
                    "type": "line"
                },
                {
                    "text": "the work, and under which the third party grants, to any of the",
                    "type": "line"
                },
                {
                    "text": "parties who would receive the covered work from you, a discriminatory",
                    "type": "line"
                },
                {
                    "text": "patent license (a) in connection with copies of the covered work",
                    "type": "line"
                },
                {
                    "text": "conveyed by you (or copies made from those copies), or (b) primarily",
                    "type": "line"
                },
                {
                    "text": "for and in connection with specific products or compilations that",
                    "type": "line"
                },
                {
                    "text": "contain the covered work, unless you entered into that arrangement,",
                    "type": "line"
                },
                {
                    "text": "or that patent license was granted, prior to 28 March 2007.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Nothing in this License shall be construed as excluding or limiting",
                    "type": "line"
                },
                {
                    "text": "any implied license or other defenses to infringement that may",
                    "type": "line"
                },
                {
                    "text": "otherwise be available to you under applicable patent law.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  12. No Surrender of Others' Freedom.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  If conditions are imposed on you (whether by court order, agreement or",
                    "type": "line"
                },
                {
                    "text": "otherwise) that contradict the conditions of this License, they do not",
                    "type": "line"
                },
                {
                    "text": "excuse you from the conditions of this License.  If you cannot convey a",
                    "type": "line"
                },
                {
                    "text": "covered work so as to satisfy simultaneously your obligations under this",
                    "type": "line"
                },
                {
                    "text": "License and any other pertinent obligations, then as a consequence you may",
                    "type": "line"
                },
                {
                    "text": "not convey it at all.  For example, if you agree to terms that obligate you",
                    "type": "line"
                },
                {
                    "text": "to collect a royalty for further conveying from those to whom you convey",
                    "type": "line"
                },
                {
                    "text": "the Program, the only way you could satisfy both those terms and this",
                    "type": "line"
                },
                {
                    "text": "License would be to refrain entirely from conveying the Program.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  13. Use with the GNU Affero General Public License.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Notwithstanding any other provision of this License, you have",
                    "type": "line"
                },
                {
                    "text": "permission to link or combine any covered work with a work licensed",
                    "type": "line"
                },
                {
                    "text": "under version 3 of the GNU Affero General Public License into a single",
                    "type": "line"
                },
                {
                    "text": "combined work, and to convey the resulting work.  The terms of this",
                    "type": "line"
                },
                {
                    "text": "License will continue to apply to the part which is the covered work,",
                    "type": "line"
                },
                {
                    "text": "but the special requirements of the GNU Affero General Public License,",
                    "type": "line"
                },
                {
                    "text": "section 13, concerning interaction through a network will apply to the",
                    "type": "line"
                },
                {
                    "text": "combination as such.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  14. Revised Versions of this License.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  The Free Software Foundation may publish revised and/or new versions of",
                    "type": "line"
                },
                {
                    "text": "the GNU General Public License from time to time.  Such new versions will",
                    "type": "line"
                },
                {
                    "text": "be similar in spirit to the present version, but may differ in detail to",
                    "type": "line"
                },
                {
                    "text": "address new problems or concerns.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Each version is given a distinguishing version number.  If the",
                    "type": "line"
                },
                {
                    "text": "Program specifies that a certain numbered version of the GNU General",
                    "type": "line"
                },
                {
                    "text": "Public License \"or any later version\" applies to it, you have the",
                    "type": "line"
                },
                {
                    "text": "option of following the terms and conditions either of that numbered",
                    "type": "line"
                },
                {
                    "text": "version or of any later version published by the Free Software",
                    "type": "line"
                },
                {
                    "text": "Foundation.  If the Program does not specify a version number of the",
                    "type": "line"
                },
                {
                    "text": "GNU General Public License, you may choose any version ever published",
                    "type": "line"
                },
                {
                    "text": "by the Free Software Foundation.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  If the Program specifies that a proxy can decide which future",
                    "type": "line"
                },
                {
                    "text": "versions of the GNU General Public License can be used, that proxy's",
                    "type": "line"
                },
                {
                    "text": "public statement of acceptance of a version permanently authorizes you",
                    "type": "line"
                },
                {
                    "text": "to choose that version for the Program.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  Later license versions may give you additional or different",
                    "type": "line"
                },
                {
                    "text": "permissions.  However, no additional obligations are imposed on any",
                    "type": "line"
                },
                {
                    "text": "author or copyright holder as a result of your choosing to follow a",
                    "type": "line"
                },
                {
                    "text": "later version.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  15. Disclaimer of Warranty.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY",
                    "type": "line"
                },
                {
                    "text": "APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT",
                    "type": "line"
                },
                {
                    "text": "HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY",
                    "type": "line"
                },
                {
                    "text": "OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,",
                    "type": "line"
                },
                {
                    "text": "THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR",
                    "type": "line"
                },
                {
                    "text": "PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM",
                    "type": "line"
                },
                {
                    "text": "IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF",
                    "type": "line"
                },
                {
                    "text": "ALL NECESSARY SERVICING, REPAIR OR CORRECTION.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  16. Limitation of Liability.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING",
                    "type": "line"
                },
                {
                    "text": "WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS",
                    "type": "line"
                },
                {
                    "text": "THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY",
                    "type": "line"
                },
                {
                    "text": "GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE",
                    "type": "line"
                },
                {
                    "text": "USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF",
                    "type": "line"
                },
                {
                    "text": "DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD",
                    "type": "line"
                },
                {
                    "text": "PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),",
                    "type": "line"
                },
                {
                    "text": "EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF",
                    "type": "line"
                },
                {
                    "text": "SUCH DAMAGES.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  17. Interpretation of Sections 15 and 16.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  If the disclaimer of warranty and limitation of liability provided",
                    "type": "line"
                },
                {
                    "text": "above cannot be given local legal effect according to their terms,",
                    "type": "line"
                },
                {
                    "text": "reviewing courts shall apply local law that most closely approximates",
                    "type": "line"
                },
                {
                    "text": "an absolute waiver of all civil liability in connection with the",
                    "type": "line"
                },
                {
                    "text": "Program, unless a warranty or assumption of liability accompanies a",
                    "type": "line"
                },
                {
                    "text": "copy of the Program in return for a fee.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "                     END OF TERMS AND CONDITIONS",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "            How to Apply These Terms to Your New Programs",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  If you develop a new program, and you want it to be of the greatest",
                    "type": "line"
                },
                {
                    "text": "possible use to the public, the best way to achieve this is to make it",
                    "type": "line"
                },
                {
                    "text": "free software which everyone can redistribute and change under these terms.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  To do so, attach the following notices to the program.  It is safest",
                    "type": "line"
                },
                {
                    "text": "to attach them to the start of each source file to most effectively",
                    "type": "line"
                },
                {
                    "text": "state the exclusion of warranty; and each file should have at least",
                    "type": "line"
                },
                {
                    "text": "the \"copyright\" line and a pointer to where the full notice is found.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    <one line to give the program's name and a brief idea of what it does.>",
                    "type": "line"
                },
                {
                    "text": "    Copyright (C) <year>  <name of author>",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    This program is free software: you can redistribute it and/or modify",
                    "type": "line"
                },
                {
                    "text": "    it under the terms of the GNU General Public License as published by",
                    "type": "line"
                },
                {
                    "text": "    the Free Software Foundation, either version 3 of the License, or",
                    "type": "line"
                },
                {
                    "text": "    (at your option) any later version.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    This program is distributed in the hope that it will be useful,",
                    "type": "line"
                },
                {
                    "text": "    but WITHOUT ANY WARRANTY; without even the implied warranty of",
                    "type": "line"
                },
                {
                    "text": "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                    "type": "line"
                },
                {
                    "text": "    GNU General Public License for more details.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    You should have received a copy of the GNU General Public License",
                    "type": "line"
                },
                {
                    "text": "    along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "Also add information on how to contact you by electronic and paper mail.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  If the program does terminal interaction, make it output a short",
                    "type": "line"
                },
                {
                    "text": "notice like this when it starts in an interactive mode:",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    <program>  Copyright (C) <year>  <name of author>",
                    "type": "line"
                },
                {
                    "text": "    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.",
                    "type": "line"
                },
                {
                    "text": "    This is free software, and you are welcome to redistribute it",
                    "type": "line"
                },
                {
                    "text": "    under certain conditions; type `show c' for details.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "The hypothetical commands `show w' and `show c' should show the appropriate",
                    "type": "line"
                },
                {
                    "text": "parts of the General Public License.  Of course, your program's commands",
                    "type": "line"
                },
                {
                    "text": "might be different; for a GUI interface, you would use an \"about box\".",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  You should also get your employer (if you work as a programmer) or school,",
                    "type": "line"
                },
                {
                    "text": "if any, to sign a \"copyright disclaimer\" for the program, if necessary.",
                    "type": "line"
                },
                {
                    "text": "For more information on this, and how to apply and follow the GNU GPL, see",
                    "type": "line"
                },
                {
                    "text": "<http://www.gnu.org/licenses/>.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "  The GNU General Public License does not permit incorporating your program",
                    "type": "line"
                },
                {
                    "text": "into proprietary programs.  If your program is a subroutine library, you",
                    "type": "line"
                },
                {
                    "text": "may consider it more useful to permit linking proprietary applications with",
                    "type": "line"
                },
                {
                    "text": "the library.  If this is what you want to do, use the GNU Lesser General",
                    "type": "line"
                },
                {
                    "text": "Public License instead of this License.  But first, please read",
                    "type": "line"
                },
                {
                    "text": "<http://www.gnu.org/philosophy/why-not-lgpl.html>.",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "Enter note text...\n",
            "timestamp_created": "2021-07-09T10:04:48.871626",
            "type": "code"
        },
        "60a53ecd900547f1b12465ccbe961b1b": {
            "chunkpath": [
                "wx_ui"
            ],
            "filepath": [
                "rlselect2.py"
            ],
            "fragments": [
                {
                    "text": "import wx",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def wx_ui_run(config, controller):",
                    "type": "line"
                },
                {
                    "text": "    app = MyApp()",
                    "type": "line"
                },
                {
                    "text": "    main_frame = WxCurses(app, config, controller)",
                    "type": "line"
                },
                {
                    "text": "    main_frame.Show()",
                    "type": "line"
                },
                {
                    "text": "    app.MainLoop()",
                    "type": "line"
                },
                {
                    "text": "    return app.get_result()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class MyApp(wx.App):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self):",
                    "type": "line"
                },
                {
                    "text": "        wx.App.__init__(self, False)",
                    "type": "line"
                },
                {
                    "text": "        self.set_result(None)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_result(self, result):",
                    "type": "line"
                },
                {
                    "text": "        self._result = result",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_result(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._result",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class WxCurses(wx.Frame):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, app, config, controller):",
                    "type": "line"
                },
                {
                    "text": "        wx.Frame.__init__(self, None, size=config.get_gui_size())",
                    "type": "line"
                },
                {
                    "text": "        self._screen = WxScreen(self, app, config, controller)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class WxScreen(wx.Panel):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, parent, app, config, controller):",
                    "type": "line"
                },
                {
                    "text": "        wx.Panel.__init__(self, parent, style=wx.NO_BORDER | wx.WANTS_CHARS)",
                    "type": "line"
                },
                {
                    "text": "        self._app = app",
                    "type": "line"
                },
                {
                    "text": "        self._config = config",
                    "type": "line"
                },
                {
                    "text": "        self._controller = controller",
                    "type": "line"
                },
                {
                    "text": "        self._surface_bitmap = None",
                    "type": "line"
                },
                {
                    "text": "        self._commands = []",
                    "type": "line"
                },
                {
                    "text": "        self._init_fonts()",
                    "type": "line"
                },
                {
                    "text": "        self.SetBackgroundStyle(wx.BG_STYLE_CUSTOM)",
                    "type": "line"
                },
                {
                    "text": "        self.Bind(wx.EVT_CHAR, self._on_key_down)",
                    "type": "line"
                },
                {
                    "text": "        self.Bind(wx.EVT_PAINT, self._on_paint)",
                    "type": "line"
                },
                {
                    "text": "        wx.CallAfter(self._after_init)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _after_init(self):",
                    "type": "line"
                },
                {
                    "text": "        self._controller.setup(self)",
                    "type": "line"
                },
                {
                    "text": "        self._controller.render(self)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def getmaxyx(self):",
                    "type": "line"
                },
                {
                    "text": "        ww, wh = self.GetSize()",
                    "type": "line"
                },
                {
                    "text": "        max_y = int(wh) / int(self._fh)",
                    "type": "line"
                },
                {
                    "text": "        max_x = int(ww) / int(self._fw)",
                    "type": "line"
                },
                {
                    "text": "        return (int(max_y), int(max_x))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def erase(self):",
                    "type": "line"
                },
                {
                    "text": "        self._commands = []",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def addstr(self, y, x, text, style):",
                    "type": "line"
                },
                {
                    "text": "        self._commands.append((y, x, text, style))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def refresh(self):",
                    "type": "line"
                },
                {
                    "text": "        width, height = self.GetSize()",
                    "type": "line"
                },
                {
                    "text": "        self._surface_bitmap = wx.Bitmap(width, height)",
                    "type": "line"
                },
                {
                    "text": "        memdc = wx.MemoryDC()",
                    "type": "line"
                },
                {
                    "text": "        memdc.SelectObject(self._surface_bitmap)",
                    "type": "line"
                },
                {
                    "text": "        memdc.SetBackground(wx.Brush(",
                    "type": "line"
                },
                {
                    "text": "            self._config.get_rgb(\"BACKGROUND\"), wx.SOLID",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "        memdc.SetBackgroundMode(wx.PENSTYLE_SOLID)",
                    "type": "line"
                },
                {
                    "text": "        memdc.Clear()",
                    "type": "line"
                },
                {
                    "text": "        for (y, x, text, style) in self._commands:",
                    "type": "line"
                },
                {
                    "text": "            if style == \"highlight\":",
                    "type": "line"
                },
                {
                    "text": "                memdc.SetFont(self._base_font_bold)",
                    "type": "line"
                },
                {
                    "text": "                fg = self._config.get_rgb(self._config.get_highlight_fg())",
                    "type": "line"
                },
                {
                    "text": "                bg = self._config.get_rgb(self._config.get_highlight_bg())",
                    "type": "line"
                },
                {
                    "text": "            elif style == \"select\":",
                    "type": "line"
                },
                {
                    "text": "                memdc.SetFont(self._base_font_bold)",
                    "type": "line"
                },
                {
                    "text": "                fg = self._config.get_rgb(self._config.get_selection_fg())",
                    "type": "line"
                },
                {
                    "text": "                bg = self._config.get_rgb(self._config.get_selection_bg())",
                    "type": "line"
                },
                {
                    "text": "            elif style == \"status\":",
                    "type": "line"
                },
                {
                    "text": "                memdc.SetFont(self._base_font_bold)",
                    "type": "line"
                },
                {
                    "text": "                fg = self._config.get_rgb(\"BACKGROUND\")",
                    "type": "line"
                },
                {
                    "text": "                bg = self._config.get_rgb(\"FOREGROUND\")",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                memdc.SetFont(self._base_font)",
                    "type": "line"
                },
                {
                    "text": "                fg = self._config.get_rgb(\"FOREGROUND\")",
                    "type": "line"
                },
                {
                    "text": "                bg = self._config.get_rgb(\"BACKGROUND\")",
                    "type": "line"
                },
                {
                    "text": "            memdc.SetTextBackground(bg)",
                    "type": "line"
                },
                {
                    "text": "            memdc.SetTextForeground(fg)",
                    "type": "line"
                },
                {
                    "text": "            memdc.DrawText(text, x*self._fw, y*self._fh)",
                    "type": "line"
                },
                {
                    "text": "        del memdc",
                    "type": "line"
                },
                {
                    "text": "        self.Refresh()",
                    "type": "line"
                },
                {
                    "text": "        self.Update()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _init_fonts(self):",
                    "type": "line"
                },
                {
                    "text": "        self._base_font = wx.Font(",
                    "type": "line"
                },
                {
                    "text": "            self._config.get_gui_font_size(),",
                    "type": "line"
                },
                {
                    "text": "            wx.FONTFAMILY_TELETYPE,",
                    "type": "line"
                },
                {
                    "text": "            wx.FONTSTYLE_NORMAL,",
                    "type": "line"
                },
                {
                    "text": "            wx.FONTWEIGHT_NORMAL",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        self._base_font_bold = self._base_font.Bold()",
                    "type": "line"
                },
                {
                    "text": "        self._find_text_size()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _find_text_size(self):",
                    "type": "line"
                },
                {
                    "text": "        bitmap = wx.Bitmap(100, 100)",
                    "type": "line"
                },
                {
                    "text": "        memdc = wx.MemoryDC()",
                    "type": "line"
                },
                {
                    "text": "        memdc.SetFont(self._base_font)",
                    "type": "line"
                },
                {
                    "text": "        memdc.SelectObject(bitmap)",
                    "type": "line"
                },
                {
                    "text": "        self._fw, self._fh = memdc.GetTextExtent(\".\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _on_key_down(self, evt):",
                    "type": "line"
                },
                {
                    "text": "        result = self._controller.process_input(chr(evt.GetUnicodeKey()))",
                    "type": "line"
                },
                {
                    "text": "        if result:",
                    "type": "line"
                },
                {
                    "text": "            self._app.set_result(result)",
                    "type": "line"
                },
                {
                    "text": "            self.GetParent().Close()",
                    "type": "line"
                },
                {
                    "text": "        self._controller.render(self)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _on_paint(self, event):",
                    "type": "line"
                },
                {
                    "text": "        dc = wx.AutoBufferedPaintDC(self)",
                    "type": "line"
                },
                {
                    "text": "        if self._surface_bitmap:",
                    "type": "line"
                },
                {
                    "text": "            dc.DrawBitmap(self._surface_bitmap, 0, 0, True)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "Enter note text...\n",
            "timestamp_created": "2021-06-19T12:01:19.165239",
            "type": "code"
        },
        "64add2c2c062467fbe51fbf81b468ab9": {
            "chunkpath": [],
            "filepath": [
                "test_rlselect2.py"
            ],
            "fragments": [
                {
                    "text": "# Copyright (C) 2017, 2021  Rickard Lindberg",
                    "type": "line"
                },
                {
                    "text": "#",
                    "type": "line"
                },
                {
                    "text": "# This file is part of rlselect.",
                    "type": "line"
                },
                {
                    "text": "#",
                    "type": "line"
                },
                {
                    "text": "# rlselect is free software: you can redistribute it and/or modify",
                    "type": "line"
                },
                {
                    "text": "# it under the terms of the GNU General Public License as published by",
                    "type": "line"
                },
                {
                    "text": "# the Free Software Foundation, either version 3 of the License, or",
                    "type": "line"
                },
                {
                    "text": "# (at your option) any later version.",
                    "type": "line"
                },
                {
                    "text": "#",
                    "type": "line"
                },
                {
                    "text": "# rlselect is distributed in the hope that it will be useful,",
                    "type": "line"
                },
                {
                    "text": "# but WITHOUT ANY WARRANTY; without even the implied warranty of",
                    "type": "line"
                },
                {
                    "text": "# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                    "type": "line"
                },
                {
                    "text": "# GNU General Public License for more details.",
                    "type": "line"
                },
                {
                    "text": "#",
                    "type": "line"
                },
                {
                    "text": "# You should have received a copy of the GNU General Public License",
                    "type": "line"
                },
                {
                    "text": "# along with rlselect.  If not, see <http://www.gnu.org/licenses/>.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "from io import StringIO",
                    "type": "line"
                },
                {
                    "text": "from unittest.mock import Mock",
                    "type": "line"
                },
                {
                    "text": "import pytest",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "from rlselect2 import (",
                    "type": "line"
                },
                {
                    "text": "    Action,",
                    "type": "line"
                },
                {
                    "text": "    Config,",
                    "type": "line"
                },
                {
                    "text": "    CR,",
                    "type": "line"
                },
                {
                    "text": "    CTRL_C,",
                    "type": "line"
                },
                {
                    "text": "    CTRL_G,",
                    "type": "line"
                },
                {
                    "text": "    ESC,",
                    "type": "line"
                },
                {
                    "text": "    LF,",
                    "type": "line"
                },
                {
                    "text": "    Lines,",
                    "type": "line"
                },
                {
                    "text": "    search,",
                    "type": "line"
                },
                {
                    "text": "    TAB,",
                    "type": "line"
                },
                {
                    "text": "    UiController,",
                    "type": "line"
                },
                {
                    "text": ")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def test_defaults():",
                    "type": "line"
                },
                {
                    "text": "    config = Config()",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_highlight_fg() == \"RED\"",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_highlight_bg() == \"BACKGROUND\"",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_selection_fg() == \"WHITE\"",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_selection_bg() == \"GREEN\"",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"BACKGROUND\") == (253, 246, 227)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"FOREGROUND\") == (101, 123, 131)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"BLACK\") == (7, 54, 66)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"BLUE\") == (38, 139, 210)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"CYAN\") == (42, 161, 152)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"GREEN\") == (133, 153, 0)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"MAGENTA\") == (211, 54, 130)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"RED\") == (220, 50, 47)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"WHITE\") == (238, 232, 213)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"YELLOW\") == (181, 137, 0)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_gui_font_size() == 11",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_gui_size() == (900, 648)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def test_custom(tmpdir):",
                    "type": "line"
                },
                {
                    "text": "    tmpdir.join(\"example.cfg\").write(\"\"\"\\",
                    "type": "line"
                },
                {
                    "text": "[theme]",
                    "type": "line"
                },
                {
                    "text": "highlight_fg = MAGENTA",
                    "type": "line"
                },
                {
                    "text": "highlight_bg = CYAN",
                    "type": "line"
                },
                {
                    "text": "selection_fg = BLACK",
                    "type": "line"
                },
                {
                    "text": "selection_bg = BLUE",
                    "type": "line"
                },
                {
                    "text": "gui_font_size = 20",
                    "type": "line"
                },
                {
                    "text": "gui_size = 1000, 1000",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "[rgb]",
                    "type": "line"
                },
                {
                    "text": "BACKGROUND = 1, 1, 1",
                    "type": "line"
                },
                {
                    "text": "FOREGROUND = 2, 2, 2",
                    "type": "line"
                },
                {
                    "text": "BLACK = 3, 3, 3",
                    "type": "line"
                },
                {
                    "text": "BLUE = 4, 4, 4",
                    "type": "line"
                },
                {
                    "text": "CYAN = 5, 5, 5",
                    "type": "line"
                },
                {
                    "text": "GREEN = 6, 6, 6",
                    "type": "line"
                },
                {
                    "text": "MAGENTA = 7, 7, 7",
                    "type": "line"
                },
                {
                    "text": "RED = 8, 8, 8",
                    "type": "line"
                },
                {
                    "text": "WHITE = 9, 9, 9",
                    "type": "line"
                },
                {
                    "text": "YELLOW = 10, 10, 10",
                    "type": "line"
                },
                {
                    "text": "\"\"\")",
                    "type": "line"
                },
                {
                    "text": "    config = Config(str(tmpdir.join(\"example.cfg\")))",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_highlight_fg() == \"MAGENTA\"",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_highlight_bg() == \"CYAN\"",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_selection_fg() == \"BLACK\"",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_selection_bg() == \"BLUE\"",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"BACKGROUND\") == (1, 1, 1)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"FOREGROUND\") == (2, 2, 2)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"BLACK\") == (3, 3, 3)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"BLUE\") == (4, 4, 4)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"CYAN\") == (5, 5, 5)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"GREEN\") == (6, 6, 6)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"MAGENTA\") == (7, 7, 7)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"RED\") == (8, 8, 8)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"WHITE\") == (9, 9, 9)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_rgb(\"YELLOW\") == (10, 10, 10)",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_gui_font_size() == 20",
                    "type": "line"
                },
                {
                    "text": "    assert config.get_gui_size() == (1000, 1000)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def test_filter():",
                    "type": "line"
                },
                {
                    "text": "    lines = Lines([",
                    "type": "line"
                },
                {
                    "text": "        \"one\",",
                    "type": "line"
                },
                {
                    "text": "        \"two\",",
                    "type": "line"
                },
                {
                    "text": "        \"three\",",
                    "type": "line"
                },
                {
                    "text": "    ])",
                    "type": "line"
                },
                {
                    "text": "    term = \"t\"",
                    "type": "line"
                },
                {
                    "text": "    assert list(search(lines, term)) == [",
                    "type": "line"
                },
                {
                    "text": "        (1, [(0, 1)]),",
                    "type": "line"
                },
                {
                    "text": "        (2, [(0, 1)]),",
                    "type": "line"
                },
                {
                    "text": "    ]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def test_re():",
                    "type": "line"
                },
                {
                    "text": "    lines = Lines([",
                    "type": "line"
                },
                {
                    "text": "        \"one\",",
                    "type": "line"
                },
                {
                    "text": "        \"some].*chars\",",
                    "type": "line"
                },
                {
                    "text": "        \"three\",",
                    "type": "line"
                },
                {
                    "text": "    ])",
                    "type": "line"
                },
                {
                    "text": "    term = \"].*\"",
                    "type": "line"
                },
                {
                    "text": "    assert list(search(lines, term)) == [",
                    "type": "line"
                },
                {
                    "text": "        (1, [(4, 7)]),",
                    "type": "line"
                },
                {
                    "text": "    ]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def test_ignores_case():",
                    "type": "line"
                },
                {
                    "text": "    lines = Lines([",
                    "type": "line"
                },
                {
                    "text": "        \"hone\",",
                    "type": "line"
                },
                {
                    "text": "        \"tHree\",",
                    "type": "line"
                },
                {
                    "text": "    ])",
                    "type": "line"
                },
                {
                    "text": "    term = \"h\"",
                    "type": "line"
                },
                {
                    "text": "    assert list(search(lines, term)) == [",
                    "type": "line"
                },
                {
                    "text": "        (0, [(0, 1)]),",
                    "type": "line"
                },
                {
                    "text": "        (1, [(1, 2)]),",
                    "type": "line"
                },
                {
                    "text": "    ]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def test_uses_case():",
                    "type": "line"
                },
                {
                    "text": "    lines = Lines([",
                    "type": "line"
                },
                {
                    "text": "        \"hone\",",
                    "type": "line"
                },
                {
                    "text": "        \"tHree\",",
                    "type": "line"
                },
                {
                    "text": "    ])",
                    "type": "line"
                },
                {
                    "text": "    term = \"H\"",
                    "type": "line"
                },
                {
                    "text": "    assert list(search(lines, term)) == [",
                    "type": "line"
                },
                {
                    "text": "        (1, [(1, 2)]),",
                    "type": "line"
                },
                {
                    "text": "    ]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def test_multiple_terms():",
                    "type": "line"
                },
                {
                    "text": "    lines = Lines([",
                    "type": "line"
                },
                {
                    "text": "        \"one of them\",",
                    "type": "line"
                },
                {
                    "text": "        \"two\",",
                    "type": "line"
                },
                {
                    "text": "    ])",
                    "type": "line"
                },
                {
                    "text": "    term = \"ne th\"",
                    "type": "line"
                },
                {
                    "text": "    assert list(search(lines, term)) == [",
                    "type": "line"
                },
                {
                    "text": "        (0, [(1, 3), (7, 9)]),",
                    "type": "line"
                },
                {
                    "text": "    ]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def test_repeat():",
                    "type": "line"
                },
                {
                    "text": "    lines = Lines([",
                    "type": "line"
                },
                {
                    "text": "        \"aaa\",",
                    "type": "line"
                },
                {
                    "text": "    ])",
                    "type": "line"
                },
                {
                    "text": "    term = \"aa\"",
                    "type": "line"
                },
                {
                    "text": "    assert list(search(lines, term)) == [",
                    "type": "line"
                },
                {
                    "text": "        (0, [(0, 2)]),",
                    "type": "line"
                },
                {
                    "text": "    ]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def test_incorrect_mark_bug():",
                    "type": "line"
                },
                {
                    "text": "    lines = Lines([",
                    "type": "line"
                },
                {
                    "text": "        \"/tests/test\",",
                    "type": "line"
                },
                {
                    "text": "    ])",
                    "type": "line"
                },
                {
                    "text": "    term = \"/test\"",
                    "type": "line"
                },
                {
                    "text": "    assert list(search(lines, term)) == [",
                    "type": "line"
                },
                {
                    "text": "        (0, [(0, 5), (6, 11)]),",
                    "type": "line"
                },
                {
                    "text": "    ]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "@pytest.mark.parametrize(\"kwargs,input_,expected_output\", [",
                    "type": "line"
                },
                {
                    "text": "    ({},                   CR,     (Action(False, \"enter\"), \"\")),",
                    "type": "line"
                },
                {
                    "text": "    ({},                   LF,     (Action(False, \"enter\"), \"\")),",
                    "type": "line"
                },
                {
                    "text": "    ({\"tab_exits\": True},  TAB,    (Action(False, \"tab\"), \"\")),",
                    "type": "line"
                },
                {
                    "text": "    ({\"tab_exits\": False}, TAB,    None),",
                    "type": "line"
                },
                {
                    "text": "    ({},                   ESC,    (Action(True, \"esc\"), \"\")),",
                    "type": "line"
                },
                {
                    "text": "    ({},                   CTRL_C, (Action(True, \"ctrl-c\"), \"\")),",
                    "type": "line"
                },
                {
                    "text": "    ({},                   CTRL_G, (Action(True, \"ctrl-g\"), \"\")),",
                    "type": "line"
                },
                {
                    "text": "], ids=lambda x: \"{!r}\".format(x))",
                    "type": "line"
                },
                {
                    "text": "def test_return_values(kwargs, input_, expected_output):",
                    "type": "line"
                },
                {
                    "text": "    assert create_controller(**kwargs).process_input(input_) == expected_output",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def create_controller(tab_exits=False):",
                    "type": "line"
                },
                {
                    "text": "    screen = Mock()",
                    "type": "line"
                },
                {
                    "text": "    screen.getmaxyx.return_value = (100,  100)",
                    "type": "line"
                },
                {
                    "text": "    controller = UiController(",
                    "type": "line"
                },
                {
                    "text": "        Lines([]),",
                    "type": "line"
                },
                {
                    "text": "        \"\",",
                    "type": "line"
                },
                {
                    "text": "        lambda x, y: [],",
                    "type": "line"
                },
                {
                    "text": "        tab_exits",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                },
                {
                    "text": "    controller.setup(screen)",
                    "type": "line"
                },
                {
                    "text": "    return controller",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def test_splits_stream_into_lines():",
                    "type": "line"
                },
                {
                    "text": "    assert get_lines(\"one\\ntwo\\r\\nthree\\rfour\\n\") == [",
                    "type": "line"
                },
                {
                    "text": "        u\"one\",",
                    "type": "line"
                },
                {
                    "text": "        u\"two\",",
                    "type": "line"
                },
                {
                    "text": "        u\"three\",",
                    "type": "line"
                },
                {
                    "text": "        u\"four\",",
                    "type": "line"
                },
                {
                    "text": "    ]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def test_skips_duplicate_lines():",
                    "type": "line"
                },
                {
                    "text": "    assert get_lines(\"dup\\ndup\") == [",
                    "type": "line"
                },
                {
                    "text": "        u\"dup\",",
                    "type": "line"
                },
                {
                    "text": "    ]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def get_lines(binary):",
                    "type": "line"
                },
                {
                    "text": "    lines = Lines.from_stream(StringIO(binary))",
                    "type": "line"
                },
                {
                    "text": "    return [",
                    "type": "line"
                },
                {
                    "text": "        lines.get(index)",
                    "type": "line"
                },
                {
                    "text": "        for index",
                    "type": "line"
                },
                {
                    "text": "        in range(lines.count())",
                    "type": "line"
                },
                {
                    "text": "    ]",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "# Copyright (C) 2017  Rickard Lindberg\n#\n# This file is part of rlselect.\n#\n# rlselect is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# rlselect is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with rlselect.  If not, see <http://www.gnu.org/licenses/>.\n\n\nfrom rlselectlib import Config\n\n\ndef test_defaults():\n    config = Config()\n    assert config.get_highlight_fg() == \"RED\"\n    assert config.get_highlight_bg() == \"BACKGROUND\"\n    assert config.get_selection_fg() == \"WHITE\"\n    assert config.get_selection_bg() == \"GREEN\"\n    assert config.get_rgb(\"BACKGROUND\") == (253, 246, 227)\n    assert config.get_rgb(\"FOREGROUND\") == (101, 123, 131)\n    assert config.get_rgb(\"BLACK\") == (7, 54, 66)\n    assert config.get_rgb(\"BLUE\") == (38, 139, 210)\n    assert config.get_rgb(\"CYAN\") == (42, 161, 152)\n    assert config.get_rgb(\"GREEN\") == (133, 153, 0)\n    assert config.get_rgb(\"MAGENTA\") == (211, 54, 130)\n    assert config.get_rgb(\"RED\") == (220, 50, 47)\n    assert config.get_rgb(\"WHITE\") == (238, 232, 213)\n    assert config.get_rgb(\"YELLOW\") == (181, 137, 0)\n    assert config.get_gui_font_size() == 11\n    assert config.get_gui_size() == (900, 648)\n\n\ndef test_custom(tmpdir):\n    tmpdir.join(\"example.cfg\").write(\"\"\"\\\n[theme]\nhighlight_fg = MAGENTA\nhighlight_bg = CYAN\nselection_fg = BLACK\nselection_bg = BLUE\ngui_font_size = 20\ngui_size = 1000, 1000\n\n[rgb]\nBACKGROUND = 1, 1, 1\nFOREGROUND = 2, 2, 2\nBLACK = 3, 3, 3\nBLUE = 4, 4, 4\nCYAN = 5, 5, 5\nGREEN = 6, 6, 6\nMAGENTA = 7, 7, 7\nRED = 8, 8, 8\nWHITE = 9, 9, 9\nYELLOW = 10, 10, 10\n\"\"\")\n    config = Config(str(tmpdir.join(\"example.cfg\")))\n    assert config.get_highlight_fg() == \"MAGENTA\"\n    assert config.get_highlight_bg() == \"CYAN\"\n    assert config.get_selection_fg() == \"BLACK\"\n    assert config.get_selection_bg() == \"BLUE\"\n    assert config.get_rgb(\"BACKGROUND\") == (1, 1, 1)\n    assert config.get_rgb(\"FOREGROUND\") == (2, 2, 2)\n    assert config.get_rgb(\"BLACK\") == (3, 3, 3)\n    assert config.get_rgb(\"BLUE\") == (4, 4, 4)\n    assert config.get_rgb(\"CYAN\") == (5, 5, 5)\n    assert config.get_rgb(\"GREEN\") == (6, 6, 6)\n    assert config.get_rgb(\"MAGENTA\") == (7, 7, 7)\n    assert config.get_rgb(\"RED\") == (8, 8, 8)\n    assert config.get_rgb(\"WHITE\") == (9, 9, 9)\n    assert config.get_rgb(\"YELLOW\") == (10, 10, 10)\n    assert config.get_gui_font_size() == 20\n    assert config.get_gui_size() == (1000, 1000)\n",
            "timestamp_created": "2021-06-19T12:13:14.932109",
            "type": "code"
        },
        "6f7ec20770ba4748a2726f9813be3535": {
            "chunkpath": [],
            "filepath": [
                "rlselect2.py"
            ],
            "fragments": [
                {
                    "text": "#!/usr/bin/env python3",
                    "type": "line"
                },
                {
                    "text": "#",
                    "type": "line"
                },
                {
                    "text": "# Copyright (C) 2017, 2021  Rickard Lindberg",
                    "type": "line"
                },
                {
                    "text": "#",
                    "type": "line"
                },
                {
                    "text": "# This file is part of rlselect.",
                    "type": "line"
                },
                {
                    "text": "#",
                    "type": "line"
                },
                {
                    "text": "# rlselect is free software: you can redistribute it and/or modify",
                    "type": "line"
                },
                {
                    "text": "# it under the terms of the GNU General Public License as published by",
                    "type": "line"
                },
                {
                    "text": "# the Free Software Foundation, either version 3 of the License, or",
                    "type": "line"
                },
                {
                    "text": "# (at your option) any later version.",
                    "type": "line"
                },
                {
                    "text": "#",
                    "type": "line"
                },
                {
                    "text": "# rlselect is distributed in the hope that it will be useful,",
                    "type": "line"
                },
                {
                    "text": "# but WITHOUT ANY WARRANTY; without even the implied warranty of",
                    "type": "line"
                },
                {
                    "text": "# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                    "type": "line"
                },
                {
                    "text": "# GNU General Public License for more details.",
                    "type": "line"
                },
                {
                    "text": "#",
                    "type": "line"
                },
                {
                    "text": "# You should have received a copy of the GNU General Public License",
                    "type": "line"
                },
                {
                    "text": "# along with rlselect.  If not, see <http://www.gnu.org/licenses/>.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "from collections import namedtuple",
                    "type": "line"
                },
                {
                    "text": "from configparser import RawConfigParser",
                    "type": "line"
                },
                {
                    "text": "from itertools import islice",
                    "type": "line"
                },
                {
                    "text": "import locale",
                    "type": "line"
                },
                {
                    "text": "import os",
                    "type": "line"
                },
                {
                    "text": "import sys",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class Config(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, path=None):",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser = RawConfigParser()",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.add_section(\"theme\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"theme\", \"highlight_fg\", \"RED\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"theme\", \"highlight_bg\", \"BACKGROUND\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"theme\", \"selection_fg\", \"WHITE\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"theme\", \"selection_bg\", \"GREEN\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"theme\", \"gui_font_size\", \"11\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"theme\", \"gui_size\", \"900, 648\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.add_section(\"rgb\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"rgb\", \"BACKGROUND\", \"253, 246, 227\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"rgb\", \"FOREGROUND\", \"101, 123, 131\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"rgb\", \"BLACK\", \"7, 54, 66\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"rgb\", \"BLUE\", \"38, 139, 210\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"rgb\", \"CYAN\", \"42, 161, 152\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"rgb\", \"GREEN\", \"133, 153, 0\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"rgb\", \"MAGENTA\", \"211, 54, 130\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"rgb\", \"RED\", \"220, 50, 47\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"rgb\", \"WHITE\", \"238, 232, 213\")",
                    "type": "line"
                },
                {
                    "text": "        self._config_parser.set(\"rgb\", \"YELLOW\", \"181, 137, 0\")",
                    "type": "line"
                },
                {
                    "text": "        if path is not None:",
                    "type": "line"
                },
                {
                    "text": "            self._config_parser.read([path])",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_highlight_fg(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._config_parser.get(\"theme\", \"highlight_fg\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_highlight_bg(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._config_parser.get(\"theme\", \"highlight_bg\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_selection_fg(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._config_parser.get(\"theme\", \"selection_fg\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_selection_bg(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._config_parser.get(\"theme\", \"selection_bg\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_rgb(self, name):",
                    "type": "line"
                },
                {
                    "text": "        return self._get_int_tuple(\"rgb\", name, 3)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_gui_font_size(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._config_parser.getint(\"theme\", \"gui_font_size\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_gui_size(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._get_int_tuple(\"theme\", \"gui_size\", 2)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _get_int_tuple(self, section, name, size):",
                    "type": "line"
                },
                {
                    "text": "        result = tuple(",
                    "type": "line"
                },
                {
                    "text": "            int(x.strip())",
                    "type": "line"
                },
                {
                    "text": "            for x",
                    "type": "line"
                },
                {
                    "text": "            in self._config_parser.get(section, name).split(\",\")",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        if len(result) != size:",
                    "type": "line"
                },
                {
                    "text": "            raise ValueError(\"Expected {} integers but got {} for {}\".format(",
                    "type": "line"
                },
                {
                    "text": "                size,",
                    "type": "line"
                },
                {
                    "text": "                len(result),",
                    "type": "line"
                },
                {
                    "text": "                name",
                    "type": "line"
                },
                {
                    "text": "            ))",
                    "type": "line"
                },
                {
                    "text": "        return result",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def search(lines, expression):",
                    "type": "line"
                },
                {
                    "text": "    match = get_match_fn(expression)",
                    "type": "line"
                },
                {
                    "text": "    for index, line in lines.iter():",
                    "type": "line"
                },
                {
                    "text": "        result = match(line)",
                    "type": "line"
                },
                {
                    "text": "        if result is not None:",
                    "type": "line"
                },
                {
                    "text": "            yield (index, marks_to_ranges(result))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def get_match_fn(expression):",
                    "type": "line"
                },
                {
                    "text": "    def match(line):",
                    "type": "line"
                },
                {
                    "text": "        if ignore_case:",
                    "type": "line"
                },
                {
                    "text": "            line = line.lower()",
                    "type": "line"
                },
                {
                    "text": "        marks = set()",
                    "type": "line"
                },
                {
                    "text": "        for term, term_len in terms:",
                    "type": "line"
                },
                {
                    "text": "            if term in line:",
                    "type": "line"
                },
                {
                    "text": "                index = line.find(term)",
                    "type": "line"
                },
                {
                    "text": "                while index != -1:",
                    "type": "line"
                },
                {
                    "text": "                    marks.update(range(index, index+term_len))",
                    "type": "line"
                },
                {
                    "text": "                    index = line.find(term, index+term_len)",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                # If one term doesn't match, the expression doesn't match.",
                    "type": "line"
                },
                {
                    "text": "                return None",
                    "type": "line"
                },
                {
                    "text": "        return marks",
                    "type": "line"
                },
                {
                    "text": "    ignore_case = expression == expression.lower()",
                    "type": "line"
                },
                {
                    "text": "    terms = [(term, len(term)) for term in expression.split()]",
                    "type": "line"
                },
                {
                    "text": "    return match",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def marks_to_ranges(marks):",
                    "type": "line"
                },
                {
                    "text": "    result = []",
                    "type": "line"
                },
                {
                    "text": "    start = None",
                    "type": "line"
                },
                {
                    "text": "    end = None",
                    "type": "line"
                },
                {
                    "text": "    for mark in sorted(marks):",
                    "type": "line"
                },
                {
                    "text": "        if start is None:",
                    "type": "line"
                },
                {
                    "text": "            start = mark",
                    "type": "line"
                },
                {
                    "text": "            end = start + 1",
                    "type": "line"
                },
                {
                    "text": "        elif mark > end:",
                    "type": "line"
                },
                {
                    "text": "            result.append((start, end))",
                    "type": "line"
                },
                {
                    "text": "            start = mark",
                    "type": "line"
                },
                {
                    "text": "            end = start + 1",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            end = mark + 1",
                    "type": "line"
                },
                {
                    "text": "    if start is not None:",
                    "type": "line"
                },
                {
                    "text": "        result.append((start, end))",
                    "type": "line"
                },
                {
                    "text": "    return result",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "CTRL_W = u\"\\u0017\"",
                    "type": "line"
                },
                {
                    "text": "CTRL_N = u\"\\u000E\"",
                    "type": "line"
                },
                {
                    "text": "CTRL_P = u\"\\u0010\"",
                    "type": "line"
                },
                {
                    "text": "CTRL_C = u\"\\u0003\"",
                    "type": "line"
                },
                {
                    "text": "CTRL_G = u\"\\u0007\"",
                    "type": "line"
                },
                {
                    "text": "ESC = u\"\\u001B\"",
                    "type": "line"
                },
                {
                    "text": "BS = u\"\\u0008\"",
                    "type": "line"
                },
                {
                    "text": "CR = u\"\\u000D\"",
                    "type": "line"
                },
                {
                    "text": "LF = u\"\\u000A\"",
                    "type": "line"
                },
                {
                    "text": "TAB = u\"\\u0009\"",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def is_printable(unicode_character):",
                    "type": "line"
                },
                {
                    "text": "    return ord(unicode_character) >= 32",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "Action = namedtuple(\"Action\", [\"abort\", \"name\"])",
                    "type": "line"
                },
                {
                    "text": "ACTION_ENTER = Action(False, \"enter\")",
                    "type": "line"
                },
                {
                    "text": "ACTION_TAB = Action(False, \"tab\")",
                    "type": "line"
                },
                {
                    "text": "ACTION_ESC = Action(True, \"esc\")",
                    "type": "line"
                },
                {
                    "text": "ACTION_CTRL_C = Action(True, \"ctrl-c\")",
                    "type": "line"
                },
                {
                    "text": "ACTION_CTRL_G = Action(True, \"ctrl-g\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class UiController(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    MATCHES_START_LINE = 2",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, lines, term, search_fn, tab_exits):",
                    "type": "line"
                },
                {
                    "text": "        self._lines = lines",
                    "type": "line"
                },
                {
                    "text": "        self._term = term",
                    "type": "line"
                },
                {
                    "text": "        self._search_fn = search_fn",
                    "type": "line"
                },
                {
                    "text": "        self._action_map = {",
                    "type": "line"
                },
                {
                    "text": "            CR: ACTION_ENTER,",
                    "type": "line"
                },
                {
                    "text": "            LF: ACTION_ENTER,",
                    "type": "line"
                },
                {
                    "text": "            ESC: ACTION_ESC,",
                    "type": "line"
                },
                {
                    "text": "            CTRL_C: ACTION_CTRL_C,",
                    "type": "line"
                },
                {
                    "text": "            CTRL_G: ACTION_CTRL_G,",
                    "type": "line"
                },
                {
                    "text": "        }",
                    "type": "line"
                },
                {
                    "text": "        if tab_exits:",
                    "type": "line"
                },
                {
                    "text": "            self._action_map[TAB] = ACTION_TAB",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def setup(self, screen):",
                    "type": "line"
                },
                {
                    "text": "        self._read_size(screen)",
                    "type": "line"
                },
                {
                    "text": "        self._set_term(self._term)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def render(self, screen):",
                    "type": "line"
                },
                {
                    "text": "        screen.erase()",
                    "type": "line"
                },
                {
                    "text": "        self._render_matches(screen)",
                    "type": "line"
                },
                {
                    "text": "        self._render_header(screen)",
                    "type": "line"
                },
                {
                    "text": "        self._render_term(screen)",
                    "type": "line"
                },
                {
                    "text": "        screen.refresh()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_input(self, unicode_character):",
                    "type": "line"
                },
                {
                    "text": "        if unicode_character == BS:",
                    "type": "line"
                },
                {
                    "text": "            self._set_term(self._term[:-1])",
                    "type": "line"
                },
                {
                    "text": "        elif unicode_character == CTRL_W:",
                    "type": "line"
                },
                {
                    "text": "            self._set_term(strip_last_word(self._term))",
                    "type": "line"
                },
                {
                    "text": "        elif unicode_character == CTRL_N:",
                    "type": "line"
                },
                {
                    "text": "            self._set_match_highlight(self._match_highlight + 1)",
                    "type": "line"
                },
                {
                    "text": "        elif unicode_character == CTRL_P:",
                    "type": "line"
                },
                {
                    "text": "            self._set_match_highlight(self._match_highlight - 1)",
                    "type": "line"
                },
                {
                    "text": "        elif unicode_character in self._action_map:",
                    "type": "line"
                },
                {
                    "text": "            return (",
                    "type": "line"
                },
                {
                    "text": "                self._action_map[unicode_character],",
                    "type": "line"
                },
                {
                    "text": "                self._get_selected_item()",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        elif is_printable(unicode_character):",
                    "type": "line"
                },
                {
                    "text": "            self._set_term(self._term + unicode_character)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _read_size(self, screen):",
                    "type": "line"
                },
                {
                    "text": "        y, x = screen.getmaxyx()",
                    "type": "line"
                },
                {
                    "text": "        self._height = y",
                    "type": "line"
                },
                {
                    "text": "        self._width = x",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _render_matches(self, screen):",
                    "type": "line"
                },
                {
                    "text": "        y = self.MATCHES_START_LINE",
                    "type": "line"
                },
                {
                    "text": "        for (match_index, (line_index, items)) in enumerate(self._matches):",
                    "type": "line"
                },
                {
                    "text": "            self._render_match(",
                    "type": "line"
                },
                {
                    "text": "                screen, y, match_index, self._lines.get(line_index), items",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "            y += 1",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _render_match(self, screen, y, match_index, line, items):",
                    "type": "line"
                },
                {
                    "text": "        if match_index == self._match_highlight:",
                    "type": "line"
                },
                {
                    "text": "            self._text(screen, y, 0, self._get_line_text(line), \"select\")",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            last = 0",
                    "type": "line"
                },
                {
                    "text": "            x = 0",
                    "type": "line"
                },
                {
                    "text": "            for start, end in items:",
                    "type": "line"
                },
                {
                    "text": "                x += self._text(screen, y, x, line[last:start], \"default\")",
                    "type": "line"
                },
                {
                    "text": "                x += self._text(screen, y, x, line[start:end], \"highlight\")",
                    "type": "line"
                },
                {
                    "text": "                last = end",
                    "type": "line"
                },
                {
                    "text": "            self._text(screen, y, x, line[last:], \"default\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _get_line_text(self, line):",
                    "type": "line"
                },
                {
                    "text": "        return line.ljust(self._width)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _render_header(self, screen):",
                    "type": "line"
                },
                {
                    "text": "        self._text(screen, 1, 0, self._get_status_text(), \"status\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _get_status_text(self):",
                    "type": "line"
                },
                {
                    "text": "        return u\"selecting among {:,} lines \".format(",
                    "type": "line"
                },
                {
                    "text": "            self._lines.count()",
                    "type": "line"
                },
                {
                    "text": "        ).rjust(self._width)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _render_term(self, screen):",
                    "type": "line"
                },
                {
                    "text": "        self._text(screen, 0, 0, self._get_term_text(), \"default\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _get_term_text(self):",
                    "type": "line"
                },
                {
                    "text": "        return u\"> {}\".format(self._term)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _text(self, screen, y, x, text, style):",
                    "type": "line"
                },
                {
                    "text": "        if x >= self._width:",
                    "type": "line"
                },
                {
                    "text": "            return 0",
                    "type": "line"
                },
                {
                    "text": "        text = expand_variable_width(text)",
                    "type": "line"
                },
                {
                    "text": "        if x + len(text) >= self._width:",
                    "type": "line"
                },
                {
                    "text": "            text = text[:self._width-x]",
                    "type": "line"
                },
                {
                    "text": "        screen.addstr(y, x, text, style)",
                    "type": "line"
                },
                {
                    "text": "        return len(text)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _set_term(self, new_term):",
                    "type": "line"
                },
                {
                    "text": "        self._term = new_term",
                    "type": "line"
                },
                {
                    "text": "        self._search()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _search(self):",
                    "type": "line"
                },
                {
                    "text": "        self._matches = list(islice(",
                    "type": "line"
                },
                {
                    "text": "            self._search_fn(self._lines, self._term),",
                    "type": "line"
                },
                {
                    "text": "            self._max_matches()",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "        if len(self._matches) > 0:",
                    "type": "line"
                },
                {
                    "text": "            self._match_highlight = 0",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self._match_highlight = -1",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _max_matches(self):",
                    "type": "line"
                },
                {
                    "text": "        return max(0, self._height - self.MATCHES_START_LINE)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _set_match_highlight(self, new_value):",
                    "type": "line"
                },
                {
                    "text": "        if len(self._matches) == 0:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        if new_value >= len(self._matches):",
                    "type": "line"
                },
                {
                    "text": "            self._match_highlight = 0",
                    "type": "line"
                },
                {
                    "text": "        elif new_value < 0:",
                    "type": "line"
                },
                {
                    "text": "            self._match_highlight = len(self._matches) - 1",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self._match_highlight = new_value",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _get_selected_item(self):",
                    "type": "line"
                },
                {
                    "text": "        if self._match_highlight != -1:",
                    "type": "line"
                },
                {
                    "text": "            return self._lines.get(self._matches[self._match_highlight][0])",
                    "type": "line"
                },
                {
                    "text": "        elif len(self._matches) > 0:",
                    "type": "line"
                },
                {
                    "text": "            return self._lines.get(self._matches[0][0])",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return self._term",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def expand_variable_width(text):",
                    "type": "line"
                },
                {
                    "text": "    return text.replace(\"\\t\", \"    \")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def strip_last_word(text):",
                    "type": "line"
                },
                {
                    "text": "    remaining_parts = text.rstrip().split(\" \")[:-1]",
                    "type": "line"
                },
                {
                    "text": "    if remaining_parts:",
                    "type": "line"
                },
                {
                    "text": "        return \" \".join(remaining_parts) + \" \"",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        return \"\"",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class Lines(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    @staticmethod",
                    "type": "line"
                },
                {
                    "text": "    def from_stream(stream):",
                    "type": "line"
                },
                {
                    "text": "        return Lines(stream.read().splitlines())",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, lines):",
                    "type": "line"
                },
                {
                    "text": "        self._lines = unique(lines)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def iter(self):",
                    "type": "line"
                },
                {
                    "text": "        return enumerate(self._lines)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def count(self):",
                    "type": "line"
                },
                {
                    "text": "        return len(self._lines)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get(self, index):",
                    "type": "line"
                },
                {
                    "text": "        return self._lines[index]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def unique(items):",
                    "type": "line"
                },
                {
                    "text": "    result = []",
                    "type": "line"
                },
                {
                    "text": "    seen = {}",
                    "type": "line"
                },
                {
                    "text": "    for item in items:",
                    "type": "line"
                },
                {
                    "text": "        if item not in seen:",
                    "type": "line"
                },
                {
                    "text": "            seen[item] = True",
                    "type": "line"
                },
                {
                    "text": "            result.append(item)",
                    "type": "line"
                },
                {
                    "text": "    return result",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "USAGE = \"\"\"\\",
                    "type": "line"
                },
                {
                    "text": "I select stuff.",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "Usage:",
                    "type": "line"
                },
                {
                    "text": "  {name} [--tab] [--action] [--gui] [--] [<initial-search-term>...]",
                    "type": "line"
                },
                {
                    "text": "  {name} (-h | --help)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "Options:",
                    "type": "line"
                },
                {
                    "text": "  --tab         Allow <Tab> to select an item.",
                    "type": "line"
                },
                {
                    "text": "  --action      Print the action taken on the first line.",
                    "type": "line"
                },
                {
                    "text": "  --gui         Use GUI version instead of console version.",
                    "type": "line"
                },
                {
                    "text": "  -h,  --help   Show this message and exit.",
                    "type": "line"
                },
                {
                    "text": "\"\"\".format(",
                    "type": "line"
                },
                {
                    "text": "    name=os.path.basename(__file__)",
                    "type": "line"
                },
                {
                    "text": ")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def main():",
                    "type": "line"
                },
                {
                    "text": "    args = parse_args()",
                    "type": "line"
                },
                {
                    "text": "    if args[\"-h\"] or args[\"--help\"]:",
                    "type": "line"
                },
                {
                    "text": "        usage()",
                    "type": "line"
                },
                {
                    "text": "        success()",
                    "type": "line"
                },
                {
                    "text": "    locale.setlocale(locale.LC_ALL, \"\")",
                    "type": "line"
                },
                {
                    "text": "    (action, result) = get_ui_fn(args)(",
                    "type": "line"
                },
                {
                    "text": "        Config(os.path.expanduser(\"~/.rlselect.cfg\")),",
                    "type": "line"
                },
                {
                    "text": "        UiController(",
                    "type": "line"
                },
                {
                    "text": "            lines=Lines.from_stream(sys.stdin),",
                    "type": "line"
                },
                {
                    "text": "            term=(\" \".join(args[\"<initial-search-term>\"])),",
                    "type": "line"
                },
                {
                    "text": "            search_fn=search,",
                    "type": "line"
                },
                {
                    "text": "            tab_exits=args[\"--tab\"]",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                },
                {
                    "text": "    if args[\"--action\"]:",
                    "type": "line"
                },
                {
                    "text": "        print(action.name)",
                    "type": "line"
                },
                {
                    "text": "    if action.abort:",
                    "type": "line"
                },
                {
                    "text": "        fail()",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        print(result)",
                    "type": "line"
                },
                {
                    "text": "        success()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def get_ui_fn(args):",
                    "type": "line"
                },
                {
                    "text": "    if args[\"--gui\"]:",
                    "type": "line"
                },
                {
                    "blank_lines_before": 0,
                    "path": [
                        "wx_ui"
                    ],
                    "prefix": "        ",
                    "type": "chunk"
                },
                {
                    "text": "        return wx_ui_run",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "blank_lines_before": 0,
                    "path": [
                        "curses_ui"
                    ],
                    "prefix": "        ",
                    "type": "chunk"
                },
                {
                    "text": "        return curses_ui_run",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def parse_args():",
                    "type": "line"
                },
                {
                    "text": "    args = {",
                    "type": "line"
                },
                {
                    "text": "        \"-h\": False,",
                    "type": "line"
                },
                {
                    "text": "        \"--help\": False,",
                    "type": "line"
                },
                {
                    "text": "        \"--tab\": False,",
                    "type": "line"
                },
                {
                    "text": "        \"--action\": False,",
                    "type": "line"
                },
                {
                    "text": "        \"--gui\": False,",
                    "type": "line"
                },
                {
                    "text": "        \"<initial-search-term>\": [],",
                    "type": "line"
                },
                {
                    "text": "    }",
                    "type": "line"
                },
                {
                    "text": "    rest = sys.argv[1:]",
                    "type": "line"
                },
                {
                    "text": "    if rest == [\"-h\"]:",
                    "type": "line"
                },
                {
                    "text": "        args[\"-h\"] = True",
                    "type": "line"
                },
                {
                    "text": "        rest = []",
                    "type": "line"
                },
                {
                    "text": "    if rest == [\"--help\"]:",
                    "type": "line"
                },
                {
                    "text": "        args[\"--help\"] = True",
                    "type": "line"
                },
                {
                    "text": "        rest = []",
                    "type": "line"
                },
                {
                    "text": "    while rest:",
                    "type": "line"
                },
                {
                    "text": "        if rest[:1] == [\"--tab\"]:",
                    "type": "line"
                },
                {
                    "text": "            args[\"--tab\"] = True",
                    "type": "line"
                },
                {
                    "text": "            rest = rest[1:]",
                    "type": "line"
                },
                {
                    "text": "        if rest[:1] == [\"--action\"]:",
                    "type": "line"
                },
                {
                    "text": "            args[\"--action\"] = True",
                    "type": "line"
                },
                {
                    "text": "            rest = rest[1:]",
                    "type": "line"
                },
                {
                    "text": "        elif rest[:1] == [\"--gui\"]:",
                    "type": "line"
                },
                {
                    "text": "            args[\"--gui\"] = True",
                    "type": "line"
                },
                {
                    "text": "            rest = rest[1:]",
                    "type": "line"
                },
                {
                    "text": "        elif rest[:1] == [\"--\"]:",
                    "type": "line"
                },
                {
                    "text": "            args[\"<initial-search-term>\"] = rest[1:]",
                    "type": "line"
                },
                {
                    "text": "            rest = []",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            args[\"<initial-search-term>\"] = rest",
                    "type": "line"
                },
                {
                    "text": "            rest = []",
                    "type": "line"
                },
                {
                    "text": "    return args",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def usage():",
                    "type": "line"
                },
                {
                    "text": "    print(USAGE.strip())",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def success():",
                    "type": "line"
                },
                {
                    "text": "    sys.exit(0)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def fail():",
                    "type": "line"
                },
                {
                    "text": "    sys.exit(1)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "if __name__ == \"__main__\":",
                    "type": "line"
                },
                {
                    "text": "    main()",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "Enter note text...\n",
            "timestamp_created": "2021-06-19T11:52:38.879740",
            "type": "code"
        },
        "7ec8a0eba8324bc0863e5b146c8ad60c": {
            "chunkpath": [],
            "filepath": [
                "run_tests.sh"
            ],
            "fragments": [
                {
                    "text": "#!/bin/sh",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "set -e",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "py.test test_rlselect2.py -v",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "echo PASS",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "Enter note text...\n",
            "timestamp_created": "2021-07-09T10:07:08.712738",
            "type": "code"
        },
        "f83312733dd34f21be7a8a615a0acaaa": {
            "links": [],
            "tags": [],
            "text": "The second version is a rewrite using Smart Notes LP and also ported to Python 3.\n",
            "timestamp_created": "2021-06-19T11:52:08.954486",
            "type": "text"
        }
    },
    "version": 1
}